<?php

namespace app\system\controller;

use app\common\AdminBaseController;
use app\common\model\Tag;
use app\system\model\ProductModel;
use think\exception\DbException;
use think\Request;
use think\Db;
use think\Session;
use app\common\RegExpression;
use app\common\Md5Help;
use app\common\SysHelp;
use app\system\model\AdminModel;
use app\system\model\ContentModel;

use app\system\model\UserModel;

/**
 * 商品管理
 * Enter description here ...
 * @author Administrator
 * `price_type` tinyint(4) DEFAULT '1' COMMENT '非预约商品[1=平日价[快递商品只能1]，2选日期价]； 预约商品[1平日价，下单后预约判断是否加价]',
 */
class ProductController extends AdminBaseController {

    /**
     * 待审核列表
     * Enter description here ...
     */
    public function review() {
        $where['p.product_reviewstatus'] = 0;
        $where['p.product_del'] = 0;
        $data = $this->loadList($where);
        $this->assign('data', $data);
        return $this->display('product/review', true);
    }

    /**
     * 驳回商品列表
     * @return string
     */
    public function reback() {
        $where['p.product_reviewstatus'] = 1;
        $where['p.product_del'] = 0;
        $data = $this->loadList($where);
        $this->assign('data', $data);
        return $this->display('product/reback', true);
    }


    /**
     * 商品列表
     * @return string
     */
    public function index() {
        $where['p.product_reviewstatus'] = 2;
        $where['p.product_del'] = 0;
        $data = $this->loadList($where);
        $this->assign('data', $data);
        return $this->display('product/index', true);
    }

    /**
     * 商家商品列表
     * @return string
     */
    public function mchindex() {
        $merchant_id = $this->get('merchant_id', 0);
        $merchant = Db::name('merchant')->find($merchant_id);
        if(!$merchant){
            $this->error('商家不存在');
        }
        session('admin.mch_id', $merchant_id);
        $where['p.product_status'] = 2;
        $where['p.product_del'] = 0;
        $where['p.merchant_id'] = session('admin.mch_id');
        $data = $this->loadList($where);
        $this->assign('data', $data);
        $this->assign('merchant', $merchant);

        $merchanttxt = "<span class=\"gpsdiy\">".$merchant['merchant_name']."[".$merchant['merchant_contact'].$merchant['merchant_contactmobile']."]</span>";
        $divgps = "商家：$merchanttxt";
        $this->assign('append_title', $divgps);
        $this->assign('addbtn',  $this->returnAddbtn2('发布产品', url('system/product/add', ['mchid'=>$merchant_id]), 2));
        return $this->display('product/mchindex', true);
    }


    /**
     * 查看详情
     */
    public function view(){
        $id = $this->get('id', 0);
        $product = Db::name('product p')
                    ->field('p.*, m.merchant_name')
                    ->join('jay_merchant m', 'm.merchant_id = p.merchant_id', 'left')
                    ->where(['p.product_id'=>$id])
                    ->find();
        if($product){
            //商品基本信息
            $tagdata = Db::name('product_tags')->column('tag_id, tag_name');
            $catedata = Db::name('product_category')->column('category_id, category_name');
            $product = $this->getProductTag($tagdata, $catedata, $product);
            //价格
            $product['price'] = Db::name('product_price')->where(['product_id'=>$id])->find();
            //图片
            $product['product_carousel'] = explode(',', $product['product_carousel']);
            $product['product_compic'] = explode(',', $product['product_compic']);
            //操作日志
            $product['logs'] = Db::name('product_log')->where(['product_id'=>$id])->order('id desc')->select();
            $this->assign('product',  $product);
            $this->assign('action', url('system/product/inview'));
            return $this->display('product/view', true);
        }else{
            $this->error('商品不存在');
        }
    }


    /**
     * 审核操作
     */
    public function inview(){
        if(Request::instance()->isPost()){
            $id = $this->post('id', 0);
            $status = $this->post('status', 1);
            $reason = $this->post('reason', '');
            if($status == 1 && $reason==''){
                $this->error('请填写驳回原因');
            }
            $product = Db::name('product')->find($id);
            if($product){
                $res = Db::name('product')->where('product_id', $id)->update(['product_status'=>$status, 'product_remark'=>$reason, 'product_uptime'=>time()]);
                $this->log(($status==1?'驳回商品:':'审核通过商品:').$product['product_name']);
                ProductModel::log($id, 1, session('admin.nickname'), session('admin.id'), ($status==1?'驳回:':'审核通过:'));
                $this->success('操作成功', url('product/review'), 2);
            }
        }
        $id = $this->get('id', 0);
        $product = Db::name('product')->find($id);
        if($product){
            $this->assign('product',  $product);
            $this->assign('action', url('system/product/inview'));
            return $this->display('product/inview', false);
        }else{
            $this->error('商品不存在');
        }
    }

    /**
     * 批量删除
     */
    public function delete(){
        $id = Request::instance()->param('id', 0);
        $idstr = Request::instance()->post('idstr', '');
        if ($id > 0) {
            //$obj = Db::name('product')->where('product_id', $id)->find();
            //$this->log('软删除商品：' . $obj['product_name']);
            //$res = Db::name('product')->where('product_id', $id)->update(['product_del'=>1]);
        } else {
            //批量删除
            $idarray = explode(',', $idstr);
            foreach ($idarray as $k => $v) {
                if (!(empty($v))) {
                    $obj = Db::name('product')->where('product_id', $v)->find();
                    $this->log('软删除商品：' . $obj['product_name']);
                    $res = Db::name('product')->where('product_id', $v)->update(['product_del'=>1]);
                    ProductModel::log($id, 1, session('admin.nickname'), session('admin.id'), '软删除');
                }
            }
        }
        $this->toSuccess('删除成功');
    }

    /**
     * 加载列表数据
     */
    private function loadList($map){
        $where = $map;
        //获取参数
        $pn = $this->get('page', 1);
        $kws = $this->get('kws', '');
        $returnall = $this->get('returnall', '');
        $baokuan = $this->get('baokuan', '');
        $daodian = $this->get('daodian', '');
        $xianshi = $this->get('xianshi', '');
        $xianliang = $this->get('xianliang', '');
        $area_id = $this->get('area_id', '');
        $starttime = $this->get('starttime', '');
        $endtime = $this->get('endtime', '');
        //组合where
        if($kws != ''){
            $where['p.product_name'] = array('like', '%'.$kws.'%');
            $this->assign('kws', $kws);
        }
        if($starttime != ''){
            $where['p.product_uptime'] = array('egt', strtotime($starttime));
            $this->assign('starttime', $starttime);
        }
        if($endtime != ''){
            $where['p.product_uptime'] = array('elt', strtotime($endtime)+86400);
            $this->assign('endtime', $endtime);
        }
        if($returnall){//新人面单
            $where['p.product_returnall'] = 1;
            $this->assign('returnall', $returnall);
        }
        if($baokuan){//爆款
            $where['p.product_explosion'] = 1;
            $this->assign('baokuan', $baokuan);
        }
        if($daodian){//到店
            $where['p.product_isexpress'] = 1;
            $this->assign('daodian', $daodian);
        }
        if($xianshi){//限时
            $where['p.product_timelimit'] = 1;
            $this->assign('xianshi', $xianshi);
        }
        if($xianliang){//限量
            $where['p.product_numlimit'] = 1;
            $this->assign('xianliang', $xianliang);
        }
        $data = productModel::getList($where, $pn);
        $tagdata = Db::name('product_tags')->column('tag_id, tag_name');
        $catedata = Db::name('product_category')->column('category_id, category_name');
        foreach ($data['list'] as $k=>$v){
            $data['list'][$k] = $this->getProductTag($tagdata, $tagdata, $v);
            $data['list'][$k]['prices'] = Db::name('product_price')->field('price_id, product_property')->where(['product_id'=>$v['product_id'], 'price_status'=>1])->select();
        }
        return $data;
    }

    public function getProductTag($tagdata, $catedata, $product){
        //标签
        $tagids = explode(',' , $product['product_tags']);
        foreach ($tagids as $a=>$b){
            if(trim($b) != ''){
                $product['tagstr'] .= $tagdata[$b]."<br>";
            }
        }
        //分类
        $cateids = explode(',' , $product['product_cateids']);
        foreach ($cateids as $a=>$b){
            if(trim($b) != ''){
                $product['catestr'] .= $catedata[$b].',';
            }
        }
        //属性
        if($product['product_returnall'] == 1){
            $product['property'] .= "新人免单<br>";
        }
        if($product['product_explosion'] == 1){
            $product['property'] .= "爆款<br>";
        }
        if($product['product_isexpress'] == 1){
            $product['property'] .= "到店<br>";
        }else{
            $product['property'] .= "快递<br>";
        }
        if($product['product_timelimit'] == 1){
            $product['property'] .= "抢购<br>";
        }
        if($product['product_numlimit'] == 1){
            $product['property'] .= "限量<br>";
        }
        if($product['product_reservation'] == 1){
            $product['property'] .= "预约<br>";
        }
        return $product;
    }

    /**
     * 发布商品
     */
    public function add(){
        if(Request::instance()->isPost()){
            $data = $this->createData();
            $merchant = Db::name('merchant')->find($this->post('merchant_id', 0));
            if(!$merchant){
                $this->error('商家不存在');
            }
            if($merchant['merchant_status'] != 2){
                //$this->error('商家未审核通过，不能发布商品');
            }
            $data['merchant_id'] = $merchant['merchant_id'];
            $data['product_addtime'] = time();
            $product_id = Db::name('product')->insertGetId($data);
            if($product_id){
                //进入编辑价格
                $this->log('发布商品id：'.$product_id);
                ProductModel::log($product_id, 1, session('admin.nickname'), session('admin.id'), '发布商品');
                $this->success('发布成功', url('product/edit', ['product_id'=>$product_id]));
            }else{
                $this->error('发布商品失败');
            }
        }
        //1、选择商家；2编辑
        $cates = Db::name('product_category')->field('category_id, category_name')->where(['category_status'=>1, 'category_del'=>0])->select();
        $this->assign('cates', $cates);
        $tags = Db::name('product_tags')->field('tag_id, tag_name')->select();
        $this->assign('tags', $tags);

        $merchant_id = $this->get('mchid', 0);
        if($merchant_id > 0){
            $merchant = Db::name('merchant')->find($merchant_id);
            if(!$merchant){
                $this->error('商家不存在');
            }
            $obj['merchant'] = $merchant;
            $obj['merchant_id'] = $merchant['merchant_id'];
        }
        $obj['product_starttime'] = time();
        $obj['product_endtime'] = time()+2592000;
        $obj['product_startusetime'] = time();
        $obj['product_endusetime'] = time()+31536000;
        $this->assign('obj', $obj);
        $this->assign('action',  url('system/product/add'));
        return $this->display('product/add', true);
    }


    public function edit(){
        if(Request::instance()->isPost()){
            $product_id = $this->post('product_id', 0);
            $old = Db::name('product')->where(['product_id'=>$product_id])->find();
            $data = $this->createData();
            $merchant = Db::name('merchant')->find($this->post('merchant_id', 0));
            if(!$merchant){
                $this->error('商家不存在');
            }
            if($merchant['merchant_status'] != 2){
                //$this->error('商家未审核通过，不能发布商品');
            }
            $data['merchant_id'] = $merchant['merchant_id'];
            Db::startTrans();
            $res1 = Db::name('product')->where(['product_id'=>$product_id])->update($data);
            //库存属性名改变
            if($data['product_reservation'] == 1){
                $kcarray = explode('|', $data['reservationStr']);
                $oldkcarray = explode('|', $old['reservationStr']);
                $olen = getExplodlen($oldkcarray);
                $nlen = getExplodlen($kcarray);
                if($nlen < $olen){
                    for($i = $nlen; $i<$olen; $i++){
                        Db::name('product_reservationprice')->where(['product_id'=>$product_id, 'property'=>$oldkcarray[$i]])->delete();
                    }
                }
                foreach ($kcarray as $k=>$v){
                    Db::name('product_reservationprice')->where(['product_id'=>$product_id, 'property'=>$oldkcarray[$k]])->update(['property'=>$v]);
                }
            }
            if($res1 !== false){
                $this->log('编辑商品id：'.$product_id);
                ProductModel::log($product_id, 1, session('admin.nickname'), session('admin.id'), '编辑商品');
                Db::commit();
                $this->success('修改成功', session('admin.productfrom'));
            }else{
                Db::rollback();
                $this->error('修改失败', session('admin.productfrom'));
            }
        }
        session('admin.productfrom', $_SERVER['HTTP_REFERER']);
        $product = Db::name('product')->where(['product_id'=>$this->get('id', 0)])->find();
        $product['product_compic'] = explode(',', $product['product_compic']);
        $product['product_carousel'] = explode(',', $product['product_carousel']);
        $product['merchant'] = Db::name('merchant')->find($product['merchant_id']);
        $product['purchase'] = Db::name('user')->find($product['purchase_id']);
        $this->assign('obj', $product);
        $cates = Db::name('product_category')->field('category_id, category_name')->where(['category_status'=>1, 'category_del'=>0])->select();
        $this->assign('cates', $cates);
        $tags = Db::name('product_tags')->field('tag_id, tag_name')->select();
        $this->assign('tags', $tags);
        $this->assign('action',  url('system/product/edit'));
        return $this->display('product/add', true);
    }

    private function createData(){
        $data['product_name'] = $this->post('product_name', '', RegExpression::REQUIRED, '商品名称');
        $data['product_info'] = $this->post('product_info', '', RegExpression::REQUIRED, '商品详情');
        $data['product_useinfo'] = $this->post('product_useinfo', '', RegExpression::REQUIRED, '使用方法');
        $data['product_notice'] = $this->post('product_notice', '', RegExpression::REQUIRED, '温馨提示');
        $data['product_cateids'] = implode(',', $_POST['product_cateids']);
        $data['product_tags'] = implode(',', $_POST['product_tags']);
        if(!$data['product_cateids']){
            $this->error('请勾选商品分类');
        }
        $data['purchase_id'] = $this->post('purchase_id', 0);
        if($data['purchase_id'] > 0){
            $user = Db::name('user')->find($data['purchase_id']);
            if(!$user){
                $this->error('采购员不存在');
            }
        }
        $data['product_toplevel'] = $this->post('product_toplevel', 0);

        $data['product_returnall'] = $this->post('product_returnall', 0);
        $data['product_explosion'] = $this->post('product_explosion', 0);
        $data['product_isexpress'] = $this->post('product_isexpress', 2);
        $data['product_timelimit'] = $this->post('product_timelimit', 0);
        $data['product_numlimit'] = $this->post('product_numlimit', 0);
        $data['product_reservation'] = $this->post('product_reservation', 2);
        $price_type = $this->post('price_type', 1);
        if($data['product_reservation'] == 1 && $price_type == 2){
            $this->error('预约商品价格模式只能是 平日价');
        }
        if($data['product_reservation'] == 1 && $price_type == 2){
            $this->error('预约商品价格模式只能是 平日价');
        }
        //日期
        if($data['product_timelimit'] == 1){
            $data['product_starttime'] = strtotime($this->post('product_starttime', '', RegExpression::REQUIRED, '抢购开始时间'));
            $data['product_endtime'] = strtotime($this->post('product_endtime', '', RegExpression::REQUIRED, '抢购结束时间'));
            if($data['product_endtime'] < $data['product_starttime']){
                $this->error('使用结束时间必须大于开始时间');
            }
        }
        if($data['product_isexpress'] == 1){
            $data['product_startusetime'] = strtotime($this->post('product_startusetime', '', RegExpression::REQUIRED, '使用开始时间'));
            $data['product_endusetime'] = strtotime($this->post('product_endusetime', '', RegExpression::REQUIRED, '使用结束时间'));
            if($data['product_endusetime'] < $data['product_startusetime']){
                $this->error('使用结束时间必须大于开始时间');
            }
        }
        $data['product_description'] = $this->post('product_description', '');
        $data['product_pic'] = $this->post('product_pic', '');
        $data['reservationStr'] = $this->post('reservationStr', '');
        $compic1 = $this->post('compic1', '');
        $compic2 = $this->post('compic2', '');
        $compic3 = $this->post('compic3', '');
        if($compic1 != ''){
            $data['product_compic'] .= $compic1.',';
        }
        if($compic2 != ''){
            $data['product_compic'] .= $compic2.',';
        }
        if($compic3 != ''){
            $data['product_compic'] .= $compic3.',';
        }
        $data['product_carousel'] = implode(',', $_POST['batchimg1']);
        $data['product_uptime'] = time();
        return $data;
    }

    public function editprice(){
        if(Request::instance()->isPost()){
            $product_id = $this->post('product_id', 0);
            $pricedata = [];
            foreach ($_POST['property'] as $k=>$property){
                if(trim($property) == ''){
                    continue;
                }
                $vo = [];
                $vo['product_id'] = $product_id;
                $vo['price_id'] = intval($_POST['price_id'][$k]);
                $vo['product_property'] = $property;
                $vo['price_market'] = $_POST['market'][$k];
                $vo['price_sale'] = $_POST['sale'][$k];
                $vo['price_status'] = $_POST['status'.($k+1)];
                $vo['price_commission'] = $_POST['commission'][$k];
                $vo['product_totalnum'] = $_POST['totalnum'][$k];
                $vo['product_buynum'] = $_POST['buynum'][$k];
                $vo['price_settle'] = $_POST['settle'][$k];
                $vo['price_addtime'] = time();
                $pricedata[] = $vo;
            }
            foreach ($pricedata as $k=>$v){
                $this->verfiyValue($v['price_market'], RegExpression::MONEY, '市场价');
                $this->verfiyValue($v['price_sale'], RegExpression::MONEY, '销售价');
                $this->verfiyValue($v['price_commission'], RegExpression::MONEY, '佣金');
                $this->verfiyValue($v['product_totalnum'], RegExpression::NUMBER, '库存');
                $this->verfiyValue($v['product_buynum'], RegExpression::NUMBER, '已售数量');
                $this->verfiyValue($v['price_settle'], RegExpression::MONEY, '结算价格');
                if($v['price_market'] < $v['price_sale']){
                    $this->error('销售价 不能 高于 市场价');
                }
                if($v['price_commission'] >= $v['price_sale']){
                    $this->error('佣金 不能 高于 销售价');
                }
                if($v['price_sale'] <= $v['price_settle']){
                    $this->error('销售价 不能 低于 结算价格');
                }
                if($v['product_buynum'] >= $v['product_totalnum']){
                    $this->error('已售数量 不能 大于 库存总数');
                }
            }
            Db::startTrans();
            foreach ($pricedata as $k=>$v){
                $price = Db::name('product_price')->where(['price_id'=>$v['price_id']])->find();
                if($price){
                    Db::name('product_price')->where(['price_id'=>$v['price_id']])->update($v);
                }else{
                    unset($v['price_id']);
                    Db::name('product_price')->insert($v);
                }
                ProductModel::log($vo['product_id'], 1, session('admin.nickname'), session('admin.id'), '编辑价格'.$vo['price_sale']);

            }
            $lowprice = Db::name('product_price')->where(['product_id'=>$product_id])->order('price_sale asc')->find();
            Db::name('product')->where(['product_id'=>$product_id])->update(['temp_price'=>$lowprice['price_sale'],'temp_commission'=>$lowprice['price_commission']]);
            Db::commit();

            $this->log('编辑商品价格id：'.$product_id);
            $this->success('修改成功', '', 2);
        }
        $product = Db::name('product')->where(['product_id'=>$this->get('id', 0)])->find();
        $this->assign('obj', $product);
        $pricelist = Db::name('product_price')->where(['product_id'=>$this->get('id', 0)])->select();
        $this->assign('pricenum', count($pricelist));
        for($i = count($pricelist); $i < 5; $i++){
            if(!$pricelist[$i]){
                $pricelist[$i] = [];
            }
        }
        $this->assign('pricelist', $pricelist);
        $param = Db::name('parameter')->column('value', 'key');
        $this->assign('param', $param);
        $this->assign('action',  url('system/product/editprice'));
        return $this->display('product/price'.$product['price_type'], false);
    }


    /**
     * 日历库存
     */
    public function resercanlendar(){
        $price_id = $this->get('price_id', 0);
        $product = Db::name('product')->where(['product_id'=>$this->get('id', 0)])->find();
        if(!$product){
            $this->error('商品不存在');
        }
        if($product['product_reservation'] == 2){
            $this->error('免预约商品不需要设置日历库存');
        }
        if($product['product_isexpress'] == 2){
            $this->error('快递商品不需要设置日历库存');
        }
        if($product['price_type'] == 2){
            $this->error('商品价格类型[price_type=2]不支持日历库存功能');
        }
        $return['product'] = $product;
        $targetmonth = $this->get('month', date('Y-m', $product['product_startusetime']));
        $return['month_txt'] = $targetmonth;
        if($product['product_endusetime'] < strtotime($targetmonth)){
            $this->error('商品使用期限不包含'.$targetmonth);
        }
        if(strtotime(date('Y-m',$product['product_startusetime'])) > strtotime($targetmonth)){
            $this->error('商品使用期限不包含'.$targetmonth);
        }
        $return['canlendar'] = $this->getCalendar($targetmonth, $product['product_startusetime'], $product['product_endusetime'], $product['product_id'], $price_id);
        $this->assign('res', $return);
        $this->assign('price_id', $price_id);
        return $this->display('product/resercanlendar', true);
    }


    /**
     * 批量编辑日历价格
     */
    public function reservbatchedit(){
        if(Request::instance()->isPost()){
            //编辑日期
            $calendararray = explode(',', $this->post('calendararray', ''));
            $product_id = $this->post('product_id', 0);
            $priceId = $this->post('priceId', 0);
            $preday = $this->post('preday', 1);
            $product = Db::name('product')->where(['product_id'=>$product_id])->find();
            if(!$product){
                $this->error('商品不存在');
            }
            $this->editKucunAndPrice($calendararray,$product_id,$priceId, $preday);
            $this->log('批量编辑商品库存价格id：'.$product_id);
            ProductModel::log($product_id, 1, session('admin.nickname'), session('admin.id'), '批量编辑库存价格'.$this->post('calendararray', ''));
            $this->success('编辑成功', '', 2);
        }
        $calendararray = $this->get('calendararray', '');
        $product_id = $this->get('productId', 0);
        $priceId = $this->get('priceId', 0);
        $product = Db::name('product')->where(['product_id'=>$product_id])->find();
        if(!$product){
            $this->error('商品不存在');
        }
        $product['pplist'] = explode('|', $product['reservationStr']);
        $this->assign('product', $product);
        $this->assign('calendararray', $calendararray);
        $this->assign('priceId', $priceId);
        $this->assign('action',  url('system/product/reservbatchedit'));
        return $this->display('product/reservbatchedit', false);
    }

    /**
     * 编辑指定日历价格
     */
    public function reservedit(){
        if(Request::instance()->isPost()){
            //编辑日期
            $calendararray = explode(',', $this->post('calendararray', ''));
            $product_id = $this->post('product_id', 0);
            $preday = $this->post('preday', 1);
            $priceId = $this->post('priceId', 0);
            $product = Db::name('product')->where(['product_id'=>$product_id])->find();
            if(!$product){
                $this->error('商品不存在');
            }
            $this->editKucunAndPrice($calendararray,$product_id,$priceId,$preday);
            $this->log('编辑商品库存价格id：'.$product_id);
            ProductModel::log($product_id, 1, session('admin.nickname'), session('admin.id'), '编辑库存价格'.$this->post('calendararray', ''));
            $this->success('编辑成功', '', 2);
        }
        $calendar = $this->get('calendar', '');
        $product_id = $this->get('productId', 0);
        $priceId = $this->get('priceId', 0);
        $product = Db::name('product')->where(['product_id'=>$product_id])->find();
        if(!$product){
            $this->error('商品不存在');
        }
        //获取日期
        $reservationday = Db::name('product_reservationday')->where(['product_id'=>$product_id, 'calendar'=>strtotime($calendar)])->find();
        $reservationday['properts'] = explode('|', $product['reservationStr']);
        //获取库存
        $templist = Db::name('product_reservationprice')->where(['reservationday_id'=>$reservationday['reservationday_id']])->select();
        foreach ($templist as $k=>$v){
            $kclist[$v['property']]=$v;
        }
        foreach ($reservationday['properts'] as $a=>$b){
            $kcdata[$b] = $kclist[$b];
            if(!$kclist[$b]){
                $kcdata[$b]['property'] = $b;
            }
        }
        $this->assign('reservationday', $reservationday);
        $this->assign('kcdata', $kcdata);
        $this->assign('product', $product);
        $this->assign('calendararray', $calendar);
        $this->assign('priceId', $priceId);
        $this->assign('status', strtotime($calendar) > time());
        $this->assign('action',  url('system/product/reservedit'));
        return $this->display('product/reservedit', false);
    }


    /**
     * 编辑库存价格更新数据库
     * @param $calendararray
     * @param $product_id
     * @param $preday
     */
    private function editKucunAndPrice($calendararray,$product_id,$priceId,$preday){
        //更新日期数据
        foreach ($calendararray as $day){
            if(!$day){
                continue;
            }
            $dd=[];
            $dd['product_id'] = $product_id;
            $dd['preday'] = $preday;
            $dd['price_id'] = $priceId;
            $dd['calendar'] = strtotime($day);
            $dd['week'] = Tag::getWeek($day);
            $dd['uptime'] = time();
            try{
                $rd_id = Db::name('product_reservationday')->insertGetId($dd);
            }catch (DbException $e1){}
            $where1 = ['product_id'=>$product_id, 'calendar'=>$dd['calendar'], 'price_id'=>$priceId];
            Db::name('product_reservationday')->where($where1)->update($dd);
            $rd_id = Db::name('product_reservationday')->where($where1)->value('reservationday_id');
            //更新库存数据
            foreach ($_POST['property'] as $k=>$property){
                $mm = [];
                $mm['reservationday_id'] = $rd_id;
                $mm['property'] = $property;
                $mm['addprice'] = $_POST['addprice'][$k];
                $mm['totalnum'] = $_POST['totalnum'][$k];
                $mm['usenum'] = $_POST['usenum'][$k];
                $mm['product_id'] = $product_id;
                $mm['uptime'] = time();
                try{
                    Db::name('product_reservationprice')->insertGetId($mm);
                }catch (DbException $e2){}
                $where2 = ['reservationday_id'=>$rd_id, 'property'=>$mm['property']];
                Db::name('product_reservationprice')->where($where2)->update($mm);
            }
        }
    }

    /**
     * 删除指定日历
     */
    public function deletereserv(){
        $calendararray = explode(',', $this->get('calendararray', ''));
        $product_id = $this->get('productId', 0);
        $priceId = $this->get('priceId', 0);
        $product = Db::name('product')->where(['product_id'=>$product_id])->find();
        if(!$product){
            $this->error('商品不存在');
        }
        foreach ($calendararray as $k=>$day){
            $reservationday = Db::name('product_reservationday')->where(['product_id'=>$product_id, 'price_id'=>$priceId, 'calendar'=>strtotime($day)])->find();
            //删除记录
            Db::name('product_reservationday')->where(['reservationday_id'=>$reservationday['reservationday_id']])->delete();
            Db::name('product_reservationprice')->where(['reservationday_id'=>$reservationday['reservationday_id']])->delete();
            ProductModel::log($product_id, 1, session('admin.nickname'), session('admin.id'), '删除库存价格'.$day);
        }
        $this->log('删除商品库存价格id：'.$product_id);
        $this->success('删除成功');
    }

    /**
     * 获取指定月份日历表
     * @param $month
     * @param $starttime
     * @param $endtime
     */
    private function getCalendar($month, $starttime, $endtime, $product_id, $price_id){
        $monthstamp = strtotime($month);
        //查询price
        $sql = "select r.*, sum(p.totalnum) totalnum, sum(p.usenum) usenum, count(p.reservationday_id) casenum from jay_product_reservationday r ".
                " left join jay_product_reservationprice p on p.reservationday_id = r.reservationday_id ".
                " where r.product_id =".$product_id. " and r.price_id = ".$price_id.
                " GROUP BY r.reservationday_id ";
        $pricelist = Db::query($sql);
        $newpricelist = [];
        foreach ($pricelist as $k=>$v){
            $newpricelist[$v['calendar']] = $v;
        }
        //当月天数
        $dayNumber = date('t', $monthstamp);
        $calendar = [];
        //第一天星期几？补空位
        $weekindex = date('N', $monthstamp);
        for($i = 1; $i < $weekindex; $i++){
            $day = [];
            $day['day'] ='';
            $day['status'] = 0; //占位
            $day['expired'] = '';
            $day['data'] = [];
            $calendar[] = $day;
        }
        for($i = 1; $i <= $dayNumber; $i++){
            $day = [];
            $day['day'] = $month.'-'.$i;
            $day['d'] = $i;
            $day['status'] = 1;   //有效期内
            $daystamp = strtotime($day['day']);
            if($daystamp < time() || $daystamp > $endtime){
                $day['status'] = 0;
            }
            $day['expired'] = '';
            if($daystamp < time()){
                $day['expired'] = '已过期';
            }
            //组合日历价格
            $day['data'] = $newpricelist[$daystamp];
            $calendar[] = $day;
            $lashweekindex = date('N', $daystamp);
        }

        //最后一天星期几？补空位
        for($i = $lashweekindex; $i < 7; $i++){
            $day = [];
            $day['day'] ='';
            $day['status'] = 0; //占位
            $day['expired'] = '';
            $day['data'] = [];
            $calendar[] = $day;
        }

        //上一个月
        $month = date('m', $monthstamp);
        $year = date('Y', $monthstamp);
        $prev = $year.'-'.($month-1);
        if($month - 1 <= 0){
            $prev = ($year-1) .'-12';
        }
        $next = $year.'-'.($month+1);
        if($month + 1 > 12){
            $next = ($year+1) .'-01';
        }
        $return['canlendar'] = $calendar;
        $return['prev'] = $prev;
        $return['next'] = $next;
        return $return;
    }

}

