<?php
namespace app\api\controller;

use app\common\BaseController;
use think\Request;
use think\Config;
use think\Db;
//跨域设置
header('Access-Control-Allow-Origin: *');
header("Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept,provincecode, citycode,sign,product,platform");
header('Access-Control-Allow-Methods: GET, POST, PUT,DELETE');
//header('content-type:application/json;charset=utf8');
//header('Access-Control-Allow-Origin:*');//允许所有域名访问
//header('Access-Control-Expose-Headers: provincecode, citycode,sign,product,platform');
//header('Access-Control--AllowMethods:GET,POST,OPTIONS');
//header('Access-Control-Allow-Headers:x-requested-with,content-type,Origin,No-Cache,X-Requested-With,If-Modified-Since Pragma,Last-Modified,Cache-Control,Expires,Content-Type,X-E4M-With');
//

/**
 * 接口父类
 */
class ApiBaseController extends BaseController{

    protected $headerData = [];

    public function __construct(Request $request = null){
        $this->getHeaderData();
        $this->getHeaderProving();
//        if(Config::get('signswitch')){
//            $this->checkSign($this->headerData['sign']);
//        }

    }

    /**
     * 获取头部参数
     */
    public function getHeaderData(){
        $allheader = get_all_header();

        if($allheader){
            $this->headerData['provincecode'] = isset($allheader['provincecode'])?$allheader['provincecode']:'';//用户所在城市code码
            $this->headerData['citycode']     = isset($allheader['citycode'])?$allheader['citycode']:'';//用户所在城市code码
            $this->headerData['sign']         = isset($allheader['sign'])?$allheader['sign']:'';//请求参数的加密字符串,没请求参数可为空
            $this->headerData['product']      = isset($allheader['product'])?$allheader['product']:''; //产品类型：app, wechat, applet
            $this->headerData['platform']     = isset($allheader['platform'])?$allheader['platform']:''; //设备类型。苹果手机:ios 安卓手机：android
        }
    }

    /**
     * 接口返回数据
     * @param $msg
     * @param int $status
     * @param array $data
     */
    protected function returnApiData($msg, $status=200, $data=[]){
        $res['code']    = $status;
        $res['message'] = $msg;
        $res['data']    = $data;
        header('content-type:application/json;charset=utf8');
        echo json_encode($res, JSON_UNESCAPED_UNICODE);
        Db::rollback();
        exit;
    }

    /**
     * header头请求来源请求端口进行验证
     * 肖亚子
     */
    protected  function getHeaderProving(){
        $product  = array("app","wechat","applet");
        $platform = array("ios","android");

        if (!in_array($this->headerData["product"],$product)){
            $this->returnApiData("请求错误1",400);
        }

        if (!in_array($this->headerData["platform"],$platform)){
            $this->returnApiData("请求错误2",400);
        }
    }

    /**
     * 签名校验
     */
    private function checkSign($sign){
        if(count($_POST) == 0){
            // $this->returnApiData('签名失败', 400);
        }else{
            $signStr = $this->makeSignature($_POST);
            if($sign != $signStr){
                $this->returnApiData('签名失败', 400);
            }else{
                //return true;
            }
        }
    }

    /**
     * 生成URL参数
     * @param $arr
     * @return string
     */
    private function getUrlParams($arr)
    {
        $buff = "";
        foreach ($arr as $k => $v) {
            if ($k != "sign" && $v != "" && !is_array($v)) {
                $buff .= $k . "=" . $v . "&";
            }
        }
        $buff = trim($buff, "&");
        return $buff;
    }

    /**
     * 签名算法
     * 1.ksort 对参数升序排
     * 2.对参数拼接成字符串 并+ key
     * 3.md5加密 转化大写
     * 4.再base64加密
     */
    private function makeSignature($args)
    {
        ksort($args);
        $params = $this->getUrlParams($args);
        $stringSignTemp =  $params.'&key='.Config::get('signkey');
        $signature  = strtoupper(md5($stringSignTemp));
        $newSign = base64_encode($signature);
        return $newSign;
    }

}
