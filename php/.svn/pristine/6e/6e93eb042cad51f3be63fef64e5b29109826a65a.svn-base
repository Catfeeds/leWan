<?php
/**
 * Created by PhpStorm.
 * User: Admini
 * Date: 2018/11/10
 * Time: 17:05
 */

namespace app\system\controller;


use app\common\AdminBaseController;
use app\common\model\ManageFinanceModel;
use app\common\model\PayMethod;
use app\common\model\Tag;
use app\system\model\ExcelModel;
use app\system\model\FinanceModel;
use app\system\model\UserModel;
use Think\Db;

/**
 * 平台的财务统计
 * Class FinanceController
 * @package app\system\controller
 */
class FinanceController extends AdminBaseController
{

    public function index(){

    }


    /**
     * 平台收支统计
     */
    public function table(){
        $page = $this->get('page', 1);
        $starttime = $this->get('starttime', '');
        $endtime = $this->get('endtime', '');
        $where['total_tag'] = ['gt', 20181001];
        if($starttime != ''){
            $where['total_tag'] = array('between', str_replace('-','',$starttime).',20301201');
            $this->assign('starttime', $starttime);
        }
        if($endtime != ''){
            $where['total_tag'] = array('between', '20181001,'.str_replace('-','',$endtime));
            $this->assign('endtime', $endtime);
        }
        if($starttime != '' && $endtime != ''){
            $where['total_tag'] = array('between', str_replace('-','',$starttime).','.str_replace('-','',$endtime));
        }
        $fm = new FinanceModel();
        $data = $fm->getList($where, $page);
        $this->assign('data', $data);
        $this->assign('now', date('Y-m-d'));

        //统计
        $um = new UserModel();
        $total = $um->getBalanceCount();
        $this->assign("total", $total);
        //今日结算佣金
        $jrjs_amount = Db::name('account_cash'.date('Ym'))->where(['record_action'=>['in','802,803'], 'record_addtime'=>['gt', strtotime(date('Y-m-d'))]])->sum('record_amount');
        $this->assign("jrjs_amount", $jrjs_amount);
        //提现中
        $txz_amount = Db::name('user_withdraw')->where(['withdraw_status'=>['in', '0,2,3']])->sum('withdraw_amount');
        $this->assign("txz_amount", $txz_amount);
        //提现成功
        $txcg_amount = Db::name('user_withdraw')->where(['withdraw_status'=>6])->sum('withdraw_amount');
        $this->assign("txcg_amount", $txcg_amount);
        return $this->display('table', true);
    }

    /**
     * 根据指定日期计算统计数据
     */
    public function jisuan(){
        $day = $this->post('day', '');
        $starttime = strtotime($day);
        $endtime = $starttime+86399;
        //统计订单数据
        $sql1 ="select ".
               " sum(o.order_totalfee) total_order_business,".
            "   sum(a.payamount) total_order_payfee,".
            "   sum(a.coupon) total_order_coupon,".
            "   sum(p.totalsettle) total_order_settle,".
            "   sum(p.num) total_order_productnum,".
            "   sum(p.commis_first+p.commis_second+p.commis_operations+p.commis_operations_child+p.commis_playerhost_child) total_order_commission ".
            "    from jay_order o".
            "   left join jay_order_product p on p.order_id = o.order_id".
            "   left join jay_order_affiliated a on a.order_id = o.order_id".
            "   where  o.order_status>1 and o.order_paytime BETWEEN ".$starttime." and ".$endtime;
        $data = Db::query($sql1);
        //加上新人免单
        $xrwr['record_action'] = 607;
        $xrwr['record_addtime'] = ['between', $starttime.','.$endtime];
        $xrmd = Db::name('account_commission'.date('Ym',$starttime))->where($xrwr)->sum('record_amount');
        $data[0]['total_order_commission'] = abs($xrmd)+$data[0]['total_order_commission'];
        //总预约加价金额
        $wr['reservation_status'] = ['gt', 0];
        $wr['reservation_addtime'] = ['between', $starttime.','.$endtime];
        $data[0]['total_order_addfee'] = Db::name('order_user_reservation')->where($wr)->sum('reservation_addprice');

        $wj['record_addtime'] = ['between', $starttime.','.$endtime];
        $wj['record_action'] = ['in', '651,652'];
        //已结算
        $yjs = Db::name('account_commission'.date('Ym',$starttime))->where($wj)->sum('record_amount');
        $data[0]['total_jiesuan_commission'] = abs($yjs);
        //已手续费
        $wj['record_action'] = ['in', '853,854,855,856'];
        $data[0]['total_taxfee'] = Db::name('account_cash'.date('Ym',$starttime))->where($wj)->sum('record_amount');
        //商家结算
        $mwj['record_action'] = 952;
        $mwj['record_addtime'] = ['between', $starttime.','.$endtime];
        $sjjs = Db::name('merchant_account'.date('Ym',$starttime))->where($mwj)->sum('record_amount');
        $data[0]['total_merchant_settle'] = abs($sjjs);
        //提现
        $uwt['withdraw_uptime'] = ['between', $starttime.','.$endtime];
        $uwt['withdraw_status'] = 6;
        $uwt['withdraw_code'] = 'success';
        $data[0]['total_withdraw'] = Db::name('user_withdraw')->where($uwt)->sum('withdraw_amount');
        $up['total_tag'] =str_replace('-','',$day);
        Db::name('manage_finance')->where($up)->update($data[0]);
    }





    /**
     * 按订单
     */
    public function order(){
        $page = $this->get('page', 1);
        $where = $this->orderWhere();
        $fm = new FinanceModel();
        $data = $fm->getOrderList($where['where'], $page);
        $this->assign('data', $data);

        $cates = Db::name('product_categoryfinance')->select();
        $this->assign('cates', $cates);
        return $this->display('order', true);
    }


    /**
     * 导出数据
     */
    public function exportOrder(){
        $where = $this->orderWhere();
        $fm = new FinanceModel();
        $data = $fm->getOrderList($where['where'], 1, 9000000);
        $column = ['订单id', '订单编号', '第三方交易流水号', '客户姓名', '客户电话', '订单总金额', '到店/快递', '现金抵扣金额', '优惠券抵扣金额', '实际付款金额', '商家名称', '支付方式', '下单时间', '付款时间', '商品id', '商品名称', '型号', '数量', '单价', '成本', '订单商品总金额', '订单商品成本', '一级佣金', '上级佣金', '运营佣金', '运营奖金', '玩主奖金', '一级佣金用户id', '上级佣金用户id', '运营佣金用户id', '运营奖金用户id', '玩主奖金用户id'];
        $em = new ExcelModel();
        $em->export($column, $data['list'], $where['title'], '订单报表', $where['title']);
    }

    private function orderWhere(){
        $catId = $this->get('catId', 0);
        $payType = $this->get('payType', 0);
        $mname = $this->get('mname', '');
        $pid = $this->get('pid', 0);
        $orderNo = $this->get('orderNo', '');
        $starttime = $this->get('starttime', '');
        $endtime = $this->get('endtime', '');
        $return['title'] = '筛选条件：';
        //2.下单时间
        if($starttime != '' && $endtime != ''){
            $where['order_addtime'] = array('between', strtotime($starttime).','.(strtotime($endtime)+86400));
            $return['title'] .= '时间范围['.$starttime.'至'.$endtime.']&';
            $this->assign('starttime', $starttime);
            $this->assign('endtime', $endtime);
        }else{
            if($starttime != ''){
                $where['order_addtime'] = array('between', strtotime($starttime).','.time());
                $this->assign('starttime', $starttime);
                $return['title'] .= '开始时间:'.$starttime.'&';
            }
            if($endtime != ''){
                $where['order_addtime'] = array('between', '0,'.strtotime($endtime));
                $this->assign('endtime', $endtime);
                $return['title'] .= '截止时间:'.$endtime.'&';
            }
        }

        //3.订单号
        if($orderNo != ''){
            $where['order_no'] = $orderNo;
            $this->assign('orderNo', $orderNo);
            $return['title'] .= '订单号:'.$orderNo.'&';
        }
        //4.商家名称
        if($mname != ''){
            $where['merchant_name'] = $mname;
            $this->assign('mname', $mname);
            $return['title'] .= '商家:'.$mname.'&';
        }
        //5.指定商品
        if($pid > 0){
            $where['product_id'] = $pid;
            $this->assign('pid', $pid);
            $return['title'] .= '商品编号：'.$pid.'&';
        }
        //6.分类
        if($catId > 0){
            $where['catefinance_id'] = $catId;
            $this->assign('catId', $catId);
            $catName = Db::name('product_categoryfinance')->where(['category_id'=>$catId])->value('category_name');
            $return['title'] .= '分类:'.$catName.'&';
        }
        //7.支付方式
        if($payType > 0){
            $where['order_payment'] = $payType;
            $this->assign('payType', $payType);
            $return['title'] .= '支付方式：'.PayMethod::getLabelBynumber($payType);
        }
        $return['title'] = trim($return['title'] , '&');
        $return['where'] = $where;
        return $return;
    }


    /**
     * 统计商家消单
     */
    public function merchant(){
        $page = $this->get('page', 1);
        $oType = $this->get('oType', 1);
        $where = $this->orderWhere();
        $fm = new FinanceModel();
        $data = $fm->getMerchantOrderList($oType, $where['where'], $page);
        $this->assign('data', $data);

        $cates = Db::name('product_categoryfinance')->select();
        $this->assign('cates', $cates);
        return $this->display('merchant'.$oType, true);
    }

    public function exportMerchant(){
        $oType = $this->get('oType', 1);
        $where = $this->orderWhere();
        $fm = new FinanceModel();
        $data = $fm->getMerchantOrderList($oType, $where['where'], 1, 9000000);
        if($oType == 1){
            $column = ['消单id', '消单时间', '商家备注', '预约支付方式', '预约加价', '商城订单id', '订单号', '电子码', '客户姓名', '客户电话', '预约类型', '订单总金额', '订单支付方式', '付款时间','下单时间', '现金抵扣', '优惠券面额', '支付金额', '商品id', '商品名称', '属性', '数量', '单价', '成本', '订单商品总金额', '订单商品成本', '一级佣金', '上级佣金', '运营佣金', '运营奖金', '玩主奖金', '一级佣金用户id', '上级佣金用户id', '运营佣金用户id', '运营奖金用户id', '玩主奖金用户id', '分类','商家名称'];
        }else{
            $column = ['订单id', '订单编号', '客户姓名', '客户电话', '订单总金额', '订单支付方式', '付款时间', '到店/快递', '预约类型', '下单时间', '现金抵扣金额', '优惠券抵扣金额', '实际付款金额', '商品id', '商品名称', '型号', '数量', '单价', '成本', '订单商品总金额', '订单商品成本', '一级佣金', '上级佣金', '运营佣金', '运营奖金', '玩主奖金', '一级佣金用户id', '上级佣金用户id', '运营佣金用户id', '运营奖金用户id', '玩主奖金用户id', '分类','商家名称'];
        }
        $em = new ExcelModel();
        $em->export($column, $data['list'], $where['title'], '商家订单报表', ($oType==1?'到店':'快递').$where['title']);
    }
}