<?php

namespace app\system\controller;

use app\common\AdminBaseController;
use app\common\model\Levelconst;
use think\Request;
use think\Db;
use think\Session;
use app\common\RegExpression;
use app\common\Md5Help;
use app\common\SysHelp;
use app\system\model\AdminModel;
use app\system\model\ContentModel;
use app\api\model\HelpModel;
use app\system\model\ExcelModel;
use app\system\model\UserModel;

/**
 * 会员管理
 * Enter description here ...
 * @author Administrator
 *
 */
class UserController extends AdminBaseController {

    /**
     * @return string
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 获取用户数据
     * 肖亚子
     */
    public function UserList() {

        $Condition   = array();
        $Psize       = $this->get('page', 1);
        $Title       = $this->get("title");//搜索栏数据
        $Level       = $this->get("level",0);//用户等级
        $Auth        = $this->get("auth",0);//用户等级
        $StartTime   = strtotime($this->get("starttime"));//加入开始时间
        $EndTime     = strtotime($this->get("endtime"));//加入结束时间
        $RegType     = $this->get("reg_type",0);//虚拟人员
        $Purchasetag = $this->get("purchasetag",0);//采购人员
        $Purchasetype = $this->get("purchasetype",0);//采购部门
        $Lookover = $this->get("lookover",0);//公司员工
        $Distributor = $this->get("distributor",0);//分销商

        $Excel       = $this->get('excel');//导出excel

        if ($Title){
            $Condition["u.mobile|u.nickname|u.username|u.recode"] = array("like","%$Title%");
        }
        if ($Level){
            $Condition["u.level"] = array("eq",$Level);
        }
        if ($Auth){
            $Condition["u.auth"] = array("eq",$Auth);
        }
        if ($RegType){
            $Condition["u.reg_type"] = array("eq",$RegType);
        }
        if ($Purchasetag){
            if ($Purchasetag == 1){
                $Condition["u.purchasetag"] = array("eq",1);
            }else{
                $Condition["u.purchasetag"] = array("eq",0);
            }
        }
        if ($Purchasetype){
            $Condition["u.purchasetype"] = array("eq",$Purchasetype);
        }
        if ($Lookover){
            $Condition["u.lookover"] = array("eq",$Lookover);
        }
        if ($Distributor){
            $Condition["u.distributor"] = array("eq",$Distributor);
        }

        $Condition = self::TimeContrast($StartTime,$EndTime,"u.reg_time",$Condition);

        if ($Excel){
            $ExcelList = self::UserExcel($Condition);
            $Column =  array("用户昵称","联系电话","推荐码","推荐人","虚拟用户","产品供应合伙人","产品部门","用户等级","是否实名","用户状态","加入时间");
            $em = new ExcelModel();

            $Date = date("Y年m月d日H时i分");
            $em->export($Column,$ExcelList,"","用户报表",$Date."用户导出");
        }

        $Data       = UserModel::UserList($Condition,$Psize,50);
        $LevelCount = UserModel::UserCount($Condition);
        $Query      = array("title" => $Title,"level" => $Level,"auth"=>$Auth,"reg_type"=>$RegType,
                        "purchasetag"=>$Purchasetag,"purchasetype"=>$Purchasetype,
                        "lookover"=>$Lookover,"distributor"=>$Distributor);
        $Query      = self::Time($StartTime,"starttime",$Query);
        $Query      = self::Time($EndTime,"endtime",$Query);

        $this->assign("query",$Query);
        $this->assign("data",$Data);
        $this->assign("level",$LevelCount);
        $this->assign("codeurl",config("user_codeurl"));

        return $this->display('index', true);
    }

    /**
     * @param $Condition
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 用户状态转换
     * 肖亚子
     */
    private function UserExcel($Condition){
        $ExcelList = UserModel::UserListExcel($Condition);

        if ($ExcelList){
            foreach ($ExcelList as $Key => $Val){
                switch ($Val["reg_type"]){
                    case 1:$ExcelList[$Key]["reg_type"] = "否";break;
                    default:$ExcelList[$Key]["reg_type"] = "是";break;
                }
                switch ($Val["purchasetag"]){
                    case 1:$ExcelList[$Key]["purchasetag"] = "是";break;
                    default:$ExcelList[$Key]["purchasetag"] = "否";break;
                }
                switch ($Val["purchasetype"]){
                    case 1:$ExcelList[$Key]["purchasetype"] = "内部采购";break;
                    default:$ExcelList[$Key]["purchasetype"] = "外部采购";break;
                }
                switch($Val["level"]){
                    case 1:$ExcelList[$Key]["level"] = "普通用户";break;
                    case 2:$ExcelList[$Key]["level"] = "超级会员";break;
                    case 3:$ExcelList[$Key]["level"] = "分享达人";break;
                    case 4:$ExcelList[$Key]["level"] = "运营达人";break;
                    case 5:$ExcelList[$Key]["level"] = "玩主";break;
                }
                switch ($Val["auth"]){
                    case 1:$ExcelList[$Key]["auth"] = "未实名";break;
                    default:$ExcelList[$Key]["auth"] = "已实名";break;
                }
                switch ($Val["status"]){
                    case 1:$ExcelList[$Key]["status"] = "正常";break;
                    default:$ExcelList[$Key]["status"] = "禁用";break;
                }
                $ExcelList[$Key]["reg_time"] = date("Y-m-d H:i",$Val["reg_time"]);
            }
        }

        return $ExcelList;
    }

    /**
     * @return string
     * 添加虚拟用户
     * 肖亚子
     */
    public function UserAppend(){
        if (Request()->isGet()){
            return $this->display('useradd', false);
        }else{
            $Nickname = $this->post("nickname/a");
            $Phone = $this->post("phone/a");
            $User_Id  = "";

            foreach ($Nickname as $Key => $Val){
                $Mobile = $Phone[$Key];

                $Condition["reg_type"] = array("eq",2);
                $Condition["mobile"]   = array("eq",$Mobile);

                $UserFind = UserModel::UserFind($Condition);

                if ($UserFind){
                    continue;
                }

                $Data["recode"]    = HelpModel::makeUserCode();
                $Data["nickname"]  = $Val;
                $Data["mobile"]    = $Mobile;
                $Data["token"]     = self::Random();
                $Data["level"]     = 2;
                $Data["auth"]      = 1;
                $Data["reg_type"]  = 2;
                $Data["reg_time"]  = time();

                $UserID = UserModel::UserAdd($Data);

                if ($UserID){
                    $User_Id = $User_Id.",".$UserID;
                }
            }

            $this->log("添加虚拟用户：[user_id:".$User_Id."]");
            $this->toSuccess("录入成功", '', 2);
        }
    }

    /**
     * @return string
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     * (获取/修改)用户信息
     * 肖亚子
     */
    public function UserDet(){
        $Condition = array();

        if (Request()->isGet()){
            $Id = $this->get("id");

            $Condition["user_id"] = array("eq",$Id);

            $UserFind =  UserModel::UserFind($Condition);

            $this->assign("data",$UserFind);
            return $this->display('det', true);
        }else{
            $Id           = $this->post("id");
            $UserLevel    = $this->post("userlevel");
            $Level        = $this->post("level");
            $Recode       = $this->post("recode");
            $Lookover     = intval($this->post("lookover"));
            $Purchasetag  = $this->post("purchasetag");
            $Purchasetype = $this->post("purchasetype");
            $Distributor = $this->post("distributor");

            $oldUser = Db::name('user')->find();
            $Condition["user_id"] = array("eq",$Id);

            if ($UserLevel > 1){
                if ($Level){
                    $Data["level"]  = $Level;
                }

                parent::Tpl_Empty($Recode,"请输入推荐吗");
                parent::Tpl_FullSpace($Recode,"请输入推荐吗");
                parent::Tpl_StringLength($Recode,"推荐码6-16位",3,6,16);

                $ReCondition["user_id"] = array("neq",$Id);
                $ReCondition["recode"] = array("eq",$Recode);

                $UserFind =  UserModel::UserFind($ReCondition);

                if ($UserFind){
                    $this->toError("推荐码已存在请重新输入");
                }

                if ($UserFind["level"] != $Level){
                    $Data['upgrade_time'] = time();

                    switch ($Level){
                        case 2: $Remark = "用户等级修改为超级会员"; break;
                        case 3: $Remark = "用户等级修改为分享达人";break;
                        case 4: $Remark = "用户等级修改为运营达人";break;
                        case 5: $Remark = "用户等级修改为玩主";break;
                        default:break;
                    }

                    $Uplog['user_id']   = $Id;
                    $Uplog['old_level'] = $UserLevel;
                    $Uplog['new_level'] = $Level;
                    $Uplog['remark']    = $Remark;
                    $Uplog['addtime']   = time();
                }

                $Data["recode"] = $Recode;
            }

            $Data["lookover"]     = $Lookover;
            $Data["purchasetag"]  = $Purchasetag;
            $Data["distributor"]  = $Distributor;

            if ($Purchasetag == 1){
                $Data["purchasetype"] = $Purchasetype;
            }else{
                $Data["purchasetype"] = 0;
            }

            $LevelUp = UserModel::UserUpdate($Condition,$Data);

            if ($LevelUp !== false){

                if ($UserFind["level"] != $Level){
                    UserModel::UserUpgrade($Uplog);
                }

                $this->log("修改用户信息：[用户ID:".$Id."]");

                $this->toSuccess("更新成功", url("User/UserDet",array("id"=>$Id)), 1);
            }else{
                $this->toError("更新失败");
            }
        }
    }


    /**
     * @param $StartTime  开始时间
     * @param $EndTime    结束时间
     * @param $Key        字段
     * @param $Condition  返回组合
     * @return mixed
     */
    public  function TimeContrast($StartTime,$EndTime,$Key,$Condition){

        if (!empty($StartTime) && empty($EndTime)) {
            parent::Tpl_NotGtTime($StartTime,"开始时间不能大于当前时间"); //开始时间不为空和当前时间对比
            $Condition[$Key] = array(array('egt', $StartTime));
        } else if (empty($StartTime) && !empty($EndTime)) {
            parent::Tpl_NotGtTime($EndTime,"结束时间不能大于当前时间"); //结束时间不为空和当前时间对比
            $Condition[$Key] = array(array('lt', $EndTime));
        } else if (!empty($StartTime) && !empty($EndTime)) {
            parent::Tpl_TimeContrast1($StartTime,$EndTime); //开始和结束时间都不为空进行判断
            $Condition[$Key] = array(array('egt', $StartTime), array('elt', $EndTime));
        }

        return $Condition;
    }

    /**
     * @param $Time  转换时间
     * @param $Key   返回字段
     * @param $Query 组合数组
     * @return mixed
     */
    public function Time($Time,$Key,$Query){
        if(!empty($Time)){
            $Query[$Key] = date("Y-m-d H:i:s",$Time);
        }

        return $Query;
    }

    /**
     * @return string生成唯一token
     * 肖亚子
     */
    public function Random(){

        $Token = Func_Random(32);
        $Uid   = UserModel::UserFindUid($Token);

        if ($Uid){
            return Random;
        }

        return $Token;
    }

    /**
     * 删除账号
     * Enter description here ...
     */
    public function delete() {


        $id = Request::instance()->param('id', 0);

        $idstr = Request::instance()->post('idstr', '');

        if ($id > 0) {
            $obj = Db::name('member')->where('id', $id)->find();
            $this->log('删除会员：' . $obj['nickname']);
            $res = Db::name('member')->delete($id);
        } else {
            //批量删除
            $idarray = explode(',', $idstr);
            foreach ($idarray as $k => $v) {
                if (!(empty($v))) {
                    $obj = Db::name('member')->where('id', $v)->find();
                    $this->log('删除会员：' . $obj['nickname']);
                    $res = Db::name('member')->delete($v);
                }
            }
        }
        $this->toError("删除失败");

        $this->toSuccess('删除成功');
    }

    /**
     * 人物关系谱
     * @return string
     */
    public function UserTreeList(){
        $uid = Request::instance()->param('uid');
        if($uid){
            $user = UserModel::UserFind(array('user_id'=>$uid));
            $Filed = "u.user_id ,u.recode,u.floor,u.token,u.nickname,u.avatar,u.level,u.status";//uc.wxopen_id
            $Fecode = Db::name("user")->alias("u")->field($Filed)
                    ->where(array("u.user_id"=>array("eq",$uid)))->find();
            $Uid    = $Fecode["user_id"];
            $Condition["reid"] = array("eq",$Uid);
            $list = Db::name("user")->where($Condition)->select();
            $user['level'] = Levelconst::getName($user['level']);
            foreach ($list as $k=>$v){
                $list[$k]['level'] = Levelconst::getName($v['level']);
            }
            $this->assign("user", $user);
            $this->assign("list", $list);
        }
        return $this->display('user-tree-list', true);
    }

}
