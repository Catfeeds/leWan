<?php

namespace app\common\model;

use think\Db;

/**
 * 用户实时统计数据模块
 */
class AccountModel {

    /**
     * @return string
     */
    private function getTableName() {
        $_tableName = 'account';
        return $_tableName;
    }

    /**
     * 获取用户实时统计数据
     * @param $user_id
     * @param string $fields
     * @param int $tag 请用Tag
     * @return mixed
     */
    public function getItemByUserId($user_id, $fields = '*', $tag = 0) {
        $balance = Db::name($this->getTableName())
                        ->where('`user_id`=:user_id AND `account_tag`=:account_tag')->bind(['user_id'=>$user_id, 'account_tag'=>$tag])
                        ->field($fields)
                        ->order('account_id desc')
                        ->find();
        return $balance;
    }

    /**
     * 锁行
     * @param $user_id
     * @param string $fields
     * @param int $tag  请用Tag
     */
    public function lockUserItem($user_id, $fields = '*', $tag = 0) {
        return Db::name($this->getTableName())->lock(true)
                        ->where('`user_id`=:user_id AND `account_tag`=:account_tag')->bind(['user_id'=>$user_id, 'account_tag'=>$tag])
                        ->field($fields)
                        ->order('account_id desc')
                        ->find();
    }

    /**
     * 获取用户指定货币实时余额
     * @param $user_id
     * @param $currency
     * @return int
     */
    public function getBalance($user_id, $currency, $format=false) {
        $_field = 'account_' . $currency . '_balance';
        $item = $this->getItemByUserId($user_id);
        if ($item) {
            if($format){
                return sprintf('%.2f', $item[$_field]);
            }else{
                return $item[$_field];
            }
        }
        return 0;
    }

    /**
     * 获取全部余额
     * @param $user_id
     * @param int $tag
     * @param bool $format 格式化
     * @return mixed
     */
    public function getAllBalance($user_id, $tag = 0, $format = false) {
        $_field = 'account_cash_balance, account_commission_balance, account_points_balance';
        $item = $this->getItemByUserId($user_id, $_field, $tag);
        if($format){
        	foreach ($item as $k=>$v){
        		$item[$k] = sprintf('%.2f', floor($v*100)/100);
        	}
        }
        return $item;
    }

    /**
     * 判断用户指定标签统计记录ID
     * @param $user_id
     * @param int $tag
     * @return mixed
     */
    public function getUserAccountIdByTag($user_id, $tag = 0) {
        return Db::name($this->getTableName())->lock(true)
            ->where('`user_id`=:user_id AND `account_tag`=:account_tag')->bind(['user_id'=>$user_id, 'account_tag'=>$tag])
            ->order('account_id desc')
            ->value('account_id');
    }

    /**
     * 动态生成余额字段名
     *
     * @param \V4\Model\Currency $currency 货币类型， 请使用\V4\Model\Currency提供的常量
     * @return string
     */
    public function getBalanceField($currency) {
        return 'account_' . $currency . '_balance';
    }

    /**
     * 动态生成支出字段名
     *
     * @param \V4\Model\Currency $currency 货币类型， 请使用\V4\Model\Currency提供的常量
     * @return string
     */
    private function getExpenditureField($currency) {
        return 'account_' . $currency . '_expenditure';
    }

    /**
     * 动态生成收入字段名
     *
     * @param \V4\Model\Currency $currency 货币类型， 请使用\V4\Model\Currency提供的常量
     * @return string
     */
    private function getIncomeField($currency) {
        return 'account_' . $currency . '_income';
    }

    /**
     * 新增用户统计数据
     * @param $user_id
     * @param $currency
     * @param $amount
     * @param $record_balance
     * @param int $tag
     * @param $allbalence
     * @return mixed
     */
    public function add($user_id, $currency, $amount, $record_balance, $tag = 0, $allbalence) {

        $_balanceField = $this->getBalanceField($currency); // 余额字段名
        $_expenditureField = $this->getExpenditureField($currency); // 支出字段名
        $_incomeField = $this->getIncomeField($currency); // 收入字段名

        $item = [
            'user_id' => $user_id,
            $_balanceField => $record_balance,
            'account_tag' => $tag,
            'account_uptime' => time()
        ];
        foreach ($allbalence as $k => $v) {
            $item[$k] = $v;
        }

        if ($amount < 0) {
            $item[$_expenditureField] = $amount;
            $item[$_incomeField] = 0;
        } else if ($amount > 0) {
            $item[$_expenditureField] = 0;
            $item[$_incomeField] = $amount;
        }
        //同时插入财务总计
        AccountFinanceModel::init($user_id);
        return Db::name($this->getTableName())->insert($item);
    }

    /**
     * 一次获得3个余额字段
     * Enter description here ...
     * @param $currency
     */
    public function get3BalanceFields() {
        $cash = $this->getBalanceField(Currency::Cash);
        $goldcoin = $this->getBalanceField(Currency::GoldCoin);
        return $cash. ','. $goldcoin;
    }
    
    /**
     * 一次获得5个余额字段
     * Enter description here ...
     * @param $currency
     */
    public function get5BalanceFields() {
    	$cash = $this->getBalanceField(Currency::Cash);
    	$goldcoin = $this->getBalanceField(Currency::GoldCoin);
    	return $cash. ','. $goldcoin;
    }

    /**
     * 更新用户统计数据
     *
     * @param int $account_id 记录ID
     * @param $currency 货币类型， 请使用\V4\Model\Currency提供的常量
     * @param float $amount 操作金额
     * @param string $record_balance 余额字段
     * @return bool 更新结果
     */
    public function update($accountId, $currency, $amount, $record_balance, $tag = 0) {
        $_balanceField = $this->getBalanceField($currency); // 余额字段名
        $_expenditureField = $this->getExpenditureField($currency); // 支出字段名
        $_incomeField = $this->getIncomeField($currency); // 收入字段名

        $item = [
            'account_id' => $accountId,
            $_balanceField => $record_balance
        ];

        if ($amount < 0) {
            $item[$_expenditureField] = ['exp', $_expenditureField . '+' . $amount];
        } else if ($amount > 0) {
            $item[$_incomeField] = ['exp', $_incomeField . '+' . $amount];
        }
        return Db::name($this->getTableName())->update($item);
    }

    /**
     * 实时统计用户帐户数据
     *
     * @param $user_id 用户ID
     * @param \V4\Model\Currency $currency 货币类型， 请使用\V4\Model\Currency提供的常量
     * @param float $amount 操作金额
     * @return bool 操作结果
     */
    public function save($user_id, $currency, $amount, $record_balance, $allbalence) {
        if ($amount == 0) {
            return false;
        }

        // 更新用户帐户总额数据
        $_totalAccountId = $this->getUserAccountIdByTag($user_id, Tag::get());
        if ($_totalAccountId > 0) {
            if (!$this->update($_totalAccountId, $currency, $amount, $record_balance, Tag::get())) {
                return false;
            }
        } else {
            if (!$this->add($user_id, $currency, $amount, $record_balance, Tag::get())) {
                return false;
            }
        }

        // 更新用户帐户当日数据
        $_dayAccountId = $this->getUserAccountIdByTag($user_id, Tag::getDay());
        if ($_dayAccountId > 0) {
            if (!$this->update($_dayAccountId, $currency, $amount, $record_balance, Tag::getDay())) {
                return false;
            }
        } else {
            if (!$this->add($user_id, $currency, $amount, $record_balance, Tag::getDay(), $allbalence)) {
                return false;
            }
        }

        return true;
    }


}
