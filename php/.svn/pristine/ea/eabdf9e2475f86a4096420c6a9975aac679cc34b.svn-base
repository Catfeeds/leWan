-- 说明：
-- 1.开始计划任务，在mysqld下配置：event_scheduler = 1
-- 2.增加内存设置mysqld下thread_stack = 1024k


-- ----------------------------
-- [存储过程：插入账户日志]
-- Function structure for `insert_account_record`
-- ----------------------------
DROP PROCEDURE IF EXISTS `insert_account_record`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `insert_account_record`(in `user_id` int, in `order_id` int, in `record_currency` varchar(20), in `record_action` int, in `record_amount` DECIMAL(10,2), in `record_balance` DECIMAL(10,2),  in `record_addtime` int, in `record_attach` varchar(800), in `record_remark` VARCHAR(50), in `record_status` int ,out error int, out recordId int)
BEGIN

  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET error = 1; # 异常错误
  SET error = 0;

  #1.拼接sql，插入明细
  SET @month_tag = FROM_UNIXTIME(unix_timestamp(), '%Y%m');
  SET @sql1 = CONCAT('INSERT IGNORE INTO `jay_account_', record_currency, @month_tag, '`(user_id,order_id,record_currency,record_action,record_amount,record_balance,record_addtime,record_attach,record_remark,record_status) VALUES (');
  SET @sql1 = CONCAT(@sql1, user_id,',');
  SET @sql1 = CONCAT(@sql1, order_id,',');
  SET @sql1 = CONCAT(@sql1, "'",record_currency,"',");
  SET @sql1 = CONCAT(@sql1, record_action,',');
  SET @sql1 = CONCAT(@sql1, record_amount,',');
  SET @sql1 = CONCAT(@sql1, record_balance,',');
  SET @sql1 = CONCAT(@sql1, record_addtime,',');
  SET @sql1 = CONCAT(@sql1, "'",record_attach,"',");
  SET @sql1 = CONCAT(@sql1, "'",record_remark,"',");
  SET @sql1 = CONCAT(@sql1, record_status,");");
  PREPARE statement FROM @sql1;
  EXECUTE statement;
  DEALLOCATE PREPARE statement;

  SET recordId = LAST_INSERT_ID(); # 获取明细ID
END
;;
DELIMITER ;



-- ----------------------------
-- [存储过程：更新账户余额]
-- Function structure for `update_account`
-- ----------------------------
DROP PROCEDURE IF EXISTS `update_account`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `update_account`(in `userId` int, in `currenty` varchar(20), in `amount` DECIMAL(10,2), in orderId int, in action int, in attach varchar(800), in remark varchar(50),  out error int, out recordId int)
BEGIN

  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET error = 1; # 异常错误
  SET error = 0;
  set @currenty = currenty;
  SET @tag_today = from_unixtime(UNIX_TIMESTAMP(), '%Y%m%d');
  SET @field_balance = CONCAT('account_', @currenty, '_balance');
  SET @field_expenditure = CONCAT('account_', @currenty, '_expenditure');
  SET @field_income = CONCAT('account_', @currenty, '_income');

  #1.初始化用户实时收支数据
  INSERT IGNORE INTO jay_account (user_id, account_tag, account_uptime) VALUES (userId, 0, UNIX_TIMESTAMP());
  #2.初始化用户日收支数据
  INSERT IGNORE INTO jay_account (
    user_id,
    account_cash_balance,
    account_commission_balance,
    account_points_balance,
    account_tag,
    account_uptime)
    SELECT user_id, account_cash_balance, account_commission_balance, account_points_balance, @tag_today, UNIX_TIMESTAMP() FROM jay_account WHERE user_id = userId AND account_tag=0;

  #3.获取账户余额
  SET @old_balance = 0;
  SET @v_sql = CONCAT('SELECT ', @field_balance, ' INTO @old_balance FROM jay_account WHERE
                          account_tag = 0 AND user_id = ', userId, ' LIMIT 1;');
      PREPARE statement FROM @v_sql;
      EXECUTE statement;
      DEALLOCATE PREPARE statement;

  #4.更新用户实时收支总计和余额
  SET @v_sql = CONCAT('UPDATE jay_account SET
        ', @field_balance, ' = ', @field_balance, ' + ', amount, ',
        ', @field_expenditure, ' = ', @field_expenditure, ' + ', IF(amount < 0, amount, 0), ',
        ', @field_income, ' = ', @field_income, ' + ', IF(amount > 0, amount, 0), ',
        account_uptime = ', UNIX_TIMESTAMP(), '
        WHERE user_id = ', userId, ' AND account_tag = 0');
      PREPARE statement FROM @v_sql;
      EXECUTE statement;
      DEALLOCATE PREPARE statement;


  #5.更新用户当日收支总计和余额
  SET @v_sql = CONCAT('UPDATE jay_account SET
        ', @field_balance, ' = ', @field_balance, ' + ', amount, ',
        ', @field_expenditure, ' = ', @field_expenditure, ' + ', IF(amount < 0, amount, 0), ',
        ', @field_income, ' = ', @field_income, ' + ', IF(amount > 0, amount, 0), ',
        account_uptime = ', UNIX_TIMESTAMP(), '
        WHERE user_id = ', userId, ' AND account_tag = ',@tag_today);
      PREPARE statement FROM @v_sql;
      EXECUTE statement;
      DEALLOCATE PREPARE statement;

  #6.记录日志
  call insert_account_record(userId, orderId, currenty, action, amount, (@old_balance + amount), UNIX_TIMESTAMP(), attach, remark, 2, error, recordId);
END
;;
DELIMITER ;



-- ----------------------------
-- [存储过程：扣除税]
-- Function structure for `deduction_Fee`
-- ----------------------------
DROP PROCEDURE IF EXISTS `deduction_Fee`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `deduction_Fee`(in userId int, in amount DECIMAL(10,2), in taxfee_fuwu DECIMAL(10,2), in taxfee_geren DECIMAL(10,2), in taxfee_pingtai DECIMAL(10,2), in recordId int, out error int)
BEGIN

  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET error = 1; # 异常错误
  SET error = 0;

  #1.计算3个扣费金额
  set @tax_geren = FORMAT( amount * taxfee_geren / 100, 2);
  set @tax_fuwu = FORMAT( amount * taxfee_fuwu / 100, 2);
  set @tax_pingtai = FORMAT( amount * taxfee_pingtai / 100, 2);
  set @attach = CONCAT("{\"userId\":\"",userId,"\",\"userName\":\"\",\"orderNo\":\"\",\"recordId\":\"", recordId,"\"}");
  #2.扣除手续费
  IF @tax_geren > 0 THEN
    call update_account(userId, 'cash', -@tax_geren, 0, 853, @attach, "扣除个人所得税", error, @recordid);
  END IF;
  IF @tax_pingtai > 0 THEN
    call update_account(userId, 'cash', -@tax_pingtai, 0, 854, @attach, "扣除平台管理费", error, @recordid);
  END IF;
  IF @tax_fuwu > 0 THEN
    call update_account(userId, 'cash', -@tax_fuwu, 0, 855, @attach, "扣除技术服务费", error, @recordid);
  END IF;

END
;;
DELIMITER ;



-- ----------------------------
-- [存储过程：次日结算佣金到现金,一个交易一个交易的结算]
-- Function structure for `jiesuan_commissionToCashOneAndOne`
-- ----------------------------
DROP PROCEDURE IF EXISTS `jiesuan_commissionToCashOneAndOne`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `jiesuan_commissionToCashOneAndOne`(in userId int, in orderId int, in amount DECIMAL(10,2), in attach VARCHAR(800), in taxfee_fuwu DECIMAL(10,2),in taxfee_geren DECIMAL(10,2),in taxfee_pingtai DECIMAL(10,2), out error int)
BEGIN

  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET error = 1; # 异常错误
  SET error = 0;
  #1.扣除佣金
  call update_account(userId, 'commission', -amount, orderId, 651, attach, "次日结算扣除佣金", error, @recordid);
  #2.结算现金
  call update_account(userId, 'cash', amount, orderId, 802, attach, "次日结算累加现金", error, @recordid);
  #3.扣除手续费
  call deduction_Fee(userId, amount, taxfee_fuwu, taxfee_geren, taxfee_pingtai, @recordid, error);

END
;;
DELIMITER ;


-- ----------------------------
-- [存储过程：次月累计佣金到现金，一个人只有1条累计结算]
-- 传入每个用户 统计金额，具体待定
-- Function structure for `jiesuan_commissionToCashAll`
-- ----------------------------
DROP PROCEDURE IF EXISTS `jiesuan_commissionToCashAll`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `jiesuan_commissionToCashAll`(in userId int, in amount DECIMAL(10,2), in attach VARCHAR(800), in taxfee_fuwu DECIMAL(10,2),in taxfee_geren DECIMAL(10,2),in taxfee_pingtai DECIMAL(10,2), out error int)
BEGIN

  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET error = 1; # 异常错误
  SET error = 0;
  #1.扣除佣金
  call update_account(userId, 'commission', -amount, 0, 652, attach, "次月累计结算扣除佣金", error, @recordid);
  #2.结算现金
  call update_account(userId, 'cash', amount, 0, 803, attach, "次月累计结算现金", error, @recordid);
  #3.扣除手续费
  call deduction_Fee(userId, amount, taxfee_fuwu, taxfee_geren, taxfee_pingtai, @recordid, error);

END
;;
DELIMITER ;



-- ----------------------------
-- [存储过程：次日结算入口]
-- Function structure for `TimerTask_ciriJiesuan`
-- ----------------------------
DROP PROCEDURE IF EXISTS `TimerTask_ciriJiesuan`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `TimerTask_ciriJiesuan`(out error int)
BEGIN

  declare orderId int default 0;
  declare userId int default 0;
  declare recordAmount DECIMAL(10,2) default 0;
  declare recordAttach VARCHAR(800) default '';
  declare done int default 0;
  DECLARE recordlist CURSOR FOR SELECT * FROM view_forJiesuanOneAndOne order by user_id asc limit 1000;
  DECLARE CONTINUE handler FOR not found set done = 1;
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET error = 1; # 异常错误
  SET error = 0;

  # 递归层级
  SET @@max_sp_recursion_depth = 5000;
  # 今日tag
  SET @day_tag = FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y%m%d');
  # 当月tag
  SET @moth_tag = FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y%m');
  # 上月tag
  SET @lastmoth_tag = DATE_FORMAT(DATE_ADD(@day_tag, INTERVAL -1 MONTH), '%Y%m');
  # 手续费参数
  SET @taxfee_fuwu = 0;
  SET @taxfee_geren = 0;
  SET @taxfee_pingtai = 0;
  SELECT `value` INTO @taxfee_fuwu from jay_parameter where `key`='taxfee_fuwu';
  SELECT `value` INTO @taxfee_geren from jay_parameter where `key`='taxfee_geren';
  SELECT `value` INTO @taxfee_pingtai from jay_parameter where `key`='taxfee_pingtai';
  # 当日0点之前的时间戳
  SET @today_befor_time = UNIX_TIMESTAMP(FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y-%m-%d'));
  SET @execStarttime = UNIX_TIMESTAMP();

  #开启事务
  START TRANSACTION ;
  out_label: BEGIN
    OPEN recordlist;
    repeat
      FETCH recordlist INTO orderId,userId,recordAmount,recordAttach;
      IF NOT done THEN
        #1.结算佣金
        call jiesuan_commissionToCashOneAndOne(userId, orderId, recordAmount, recordAttach, @taxfee_fuwu, @taxfee_geren, @taxfee_pingtai, error);
        if error then
          leave out_label;
        end if;

        #2.更新结算状态
        SET @v_sql = CONCAT('UPDATE jay_account_commission', @lastmoth_tag, ' SET record_status = 2 ');
        SET @v_sql = CONCAT(@v_sql, ' WHERE user_id = ', userId);
        SET @v_sql = CONCAT(@v_sql, ' AND order_id = ', orderId);
        SET @v_sql = CONCAT(@v_sql, ' AND record_status = 1');
        PREPARE statement FROM @v_sql;
        EXECUTE statement;
        DEALLOCATE PREPARE statement;

        SET @v_sql = CONCAT('UPDATE jay_account_commission', @moth_tag, ' SET record_status = 2 ');
        SET @v_sql = CONCAT(@v_sql, ' WHERE user_id = ', userId);
        SET @v_sql = CONCAT(@v_sql, ' AND order_id = ', orderId);
        SET @v_sql = CONCAT(@v_sql, ' AND record_status = 1');
        PREPARE statement FROM @v_sql;
        EXECUTE statement;
        DEALLOCATE PREPARE statement;

      END IF;
    until done end repeat;
    close recordlist;#关闭释放资源
  END out_label;

  #提交事务
  IF error = 1
  THEN
    ROLLBACK ;
  ELSE
    COMMIT ;
  END IF ;

  #记录执行日志
  set @logId = addTimerlog('TimerTask_ciriJiesuan', error, @execStarttime);
  #判断是否还要继续执行
  SET @shengyu = 0;
  select count(*) into @shengyu from view_forJiesuanOneAndOne;
  IF @shengyu > 0
    THEN
    call TimerTask_ciriJiesuan(@error);
  END IF ;
END
;;
DELIMITER ;





-- ----------------------------
-- [自动创建交易明细表]Procedure structure for `TimerTask_recordtable`
-- ----------------------------
DROP PROCEDURE IF EXISTS `TimerTask_recordtable`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `TimerTask_recordtable`(OUT error INT)
BEGIN

    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET error = 1; # 异常错误
    SET error = 0;

    SET @month_tag = FROM_UNIXTIME(unix_timestamp(), '%Y%m');
    SET @nextmonth_tag = DATE_FORMAT(DATE_ADD(@month_tag * 100 + 1, INTERVAL 1 MONTH), '%Y%m');
    # 今日tag
    SET @day_tag = FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y%m%d');
    # 上月tag
    SET @lastmoth_tag = DATE_FORMAT(DATE_ADD(@day_tag, INTERVAL -1 MONTH), '%Y%m');
    SET @execStarttime = UNIX_TIMESTAMP();

    # 创建当月现金币交易记录表
    SET @v_sql = CONCAT('CREATE TABLE IF NOT EXISTS `jay_account_cash', @month_tag, '` LIKE `jay_account_record`;');
    PREPARE statement FROM @v_sql;
    EXECUTE statement;
    DEALLOCATE PREPARE statement;

    # 创建下月现金币交易记录表
    SET @v_sql = CONCAT('CREATE TABLE IF NOT EXISTS `jay_account_cash', @nextmonth_tag, '` LIKE `jay_account_record`;');
    PREPARE statement FROM @v_sql;
    EXECUTE statement;
    DEALLOCATE PREPARE statement;

    # 创建当月佣金交易记录表
    SET @v_sql = CONCAT('CREATE TABLE IF NOT EXISTS `jay_account_commission', @month_tag, '` LIKE `jay_account_record`;');
    PREPARE statement FROM @v_sql;
    EXECUTE statement;
    DEALLOCATE PREPARE statement;

    # 创建下月佣金交易记录表
    SET @v_sql = CONCAT('CREATE TABLE IF NOT EXISTS `jay_account_commission', @nextmonth_tag, '` LIKE `jay_account_record`;');
    PREPARE statement FROM @v_sql;
    EXECUTE statement;
    DEALLOCATE PREPARE statement;

    # 创建两个月佣金明细视图->按用户id,订单id统计佣金->次日结算
    DROP VIEW IF EXISTS `view_forJiesuanOneAndOne`;
    SET @v_sql = CONCAT('CREATE VIEW `view_forJiesuanOneAndOne` AS ');
    SET @v_sql = CONCAT(@v_sql, ' select r.order_id, r.user_id, sum(r.record_amount) record_amount, r.record_attach from ( ');
    SET @v_sql = CONCAT(@v_sql, ' select * from jay_account_commission', @lastmoth_tag, ' where record_status = 1 and record_action in (601,602,603) UNION ALL ');
    SET @v_sql = CONCAT(@v_sql, ' select * from jay_account_commission', @month_tag, ' where record_status = 1 and record_action in (601,602,603) ) as r ');
    SET @v_sql = CONCAT(@v_sql, ' GROUP BY r.user_id,r.order_id ');
    PREPARE statement FROM @v_sql;
    EXECUTE statement;
    DEALLOCATE PREPARE statement;


    # 创建上月玩主奖金、运营奖金 视图 > 次月结算
    DROP VIEW IF EXISTS `view_forJiesuanCiYue`;
    SET @v_sql = CONCAT('CREATE VIEW `view_forJiesuanCiYue` AS ');
    SET @v_sql = CONCAT(@v_sql, ' select user_id, SUM(record_amount) as record_amount from jay_account_commission',@month_tag);
    SET @v_sql = CONCAT(@v_sql, ' WHERE record_action in (606,604) and record_status = 1 ');
    SET @v_sql = CONCAT(@v_sql, ' GROUP BY user_id order by null ');
    PREPARE statement FROM @v_sql;
    EXECUTE statement;
    DEALLOCATE PREPARE statement;

    #记录执行日志
    set @logId = addTimerlog('TimerTask_recordtable', error, @execStarttime);
  END
;;
DELIMITER ;



-- ----------------------------
-- [自动统计上月收支入口函数]Procedure structure for `TimerTask_upAccountMonth`
-- ----------------------------
DROP PROCEDURE IF EXISTS `TimerTask_upAccountMonth`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `TimerTask_upAccountMonth`(OUT error INT)
  BEGIN

    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET error = 1; # 异常错误
    SET error = 0;
    SET @execStarttime = UNIX_TIMESTAMP();
    #1.创建临时表
    DROP TABLE IF EXISTS `temp_account0`;
    CREATE TABLE `temp_account0` as SELECT user_id from jay_account where account_tag=0 order by user_id asc;
    set @logId = addTimerlog('TimerTask_upAccountMonth', error, @execStarttime);

    #2.执行统计
    call TimerTask_lastMonthAccount(@error);
  END;
;;
DELIMITER ;
-- ----------------------------
-- [自动统计上月收支]Procedure structure for `TimerTask_lastMonthAccount`
-- ----------------------------
DROP PROCEDURE IF EXISTS `TimerTask_lastMonthAccount`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `TimerTask_lastMonthAccount`(OUT error INT)
  BEGIN

    declare done int default 0;
    declare userId int default 0;
    #获取要统计的用户id
    declare userlist cursor for select user_id from temp_account0 order by user_id asc limit 1000;
    declare continue handler for not found set done = 1;
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET error = 1; # 异常错误
    SET error = 0;

    # 递归层级
    SET @@max_sp_recursion_depth = 5000;
    SET @lastUserId = 0;
    SET @day_tag = FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y%m%d');
    # 上月tag
    SET @lastmoth_tag = DATE_FORMAT(DATE_ADD(@day_tag, INTERVAL -1 MONTH), '%Y%m');
    # 上月第一天
    SET @lastmoth_1day = CONCAT(DATE_FORMAT(DATE_ADD(@day_tag, INTERVAL -1 MONTH), '%Y%m'),'01');
    # 本月第一天
    SET @month_tag = FROM_UNIXTIME(unix_timestamp(), '%Y%m');
    SET @lastmonth_endday = CONCAT(@month_tag,'01');
    SET @execStarttime = UNIX_TIMESTAMP();
    #开启事务
    START TRANSACTION;
    #1.创建临时表:统计每一个用户的收支
    SET @tbsql = CONCAT("create TABLE temp_account_table AS select ");
    SET @tbsql = CONCAT(@tbsql, "NULL AS account_id, ");
    SET @tbsql = CONCAT(@tbsql, "user_id, ");
    SET @tbsql = CONCAT(@tbsql, "sum(account_cash_expenditure) account_cash_expenditure, ");
    SET @tbsql = CONCAT(@tbsql, "sum(account_cash_income) account_cash_income, ");
    SET @tbsql = CONCAT(@tbsql, " account_cash_balance, ");
    SET @tbsql = CONCAT(@tbsql, "sum(account_commission_expenditure) account_commission_expenditure, ");
    SET @tbsql = CONCAT(@tbsql, "sum(account_commission_income) account_commission_income, ");
    SET @tbsql = CONCAT(@tbsql, " account_commission_balance, ");
    SET @tbsql = CONCAT(@tbsql, "sum(account_points_expenditure) account_points_expenditure, ");
    SET @tbsql = CONCAT(@tbsql, "sum(account_points_income) account_points_income , ");
    SET @tbsql = CONCAT(@tbsql, " account_points_balance, ");
    SET @tbsql = CONCAT(@tbsql, @lastmoth_tag," as account_tag, ");
    SET @tbsql = CONCAT(@tbsql, "UNIX_TIMESTAMP() as account_uptime ");
    SET @tbsql = CONCAT(@tbsql, "from jay_account ");
   -- SET @tbsql = CONCAT(@tbsql, "where account_tag < ",@lastmonth_endday," and account_tag >= ", @lastmoth_1day, " ");
    SET @tbsql = CONCAT(@tbsql, "where account_tag < 20181201 and account_tag >= 20181101 ");
    SET @tbsql = CONCAT(@tbsql, "GROUP BY user_id; ");
    PREPARE statement FROM @tbsql;
    EXECUTE statement;
    DEALLOCATE PREPARE statement;

    out_label: BEGIN
      open userlist;
      repeat
        FETCH userlist INTO userId;
        IF not done
          THEN
            BEGIN
                #2.查询余额
                set @account_cash_balance = 0;
                set @account_points_balance = 0;
                set @account_commission_balance = 0;
                SET @v_sql = CONCAT('select account_cash_balance,account_commission_balance,account_points_balance into @account_cash_balance, @account_commission_balance, @account_points_balance  from jay_account where account_tag < ',@lastmonth_endday,' and user_id=',userId,' order by account_tag desc limit 1;');
                PREPARE statement FROM @v_sql;
                EXECUTE statement;
                DEALLOCATE PREPARE statement;

                #3.更新余额
                SET @uptbsql = CONCAT("update temp_account_table set account_cash_balance=",@account_cash_balance,", account_commission_balance=",@account_commission_balance,", account_points_balance=",@account_points_balance," where user_id=", userId);
                PREPARE statement FROM @uptbsql;
                EXECUTE statement;
                DEALLOCATE PREPARE statement;

                set @lastUserId = userId;
            END ;
        END IF ;
      until done end repeat;
      close userlist;#关闭释放资源

      #4.插入记录
      SET @insql = "insert IGNORE into jay_account(";
      SET @insql = CONCAT(@insql, " account_id,user_id, ");
      SET @insql = CONCAT(@insql, " account_cash_expenditure,account_cash_income,account_cash_balance, ");
      SET @insql = CONCAT(@insql, " account_commission_expenditure,account_commission_income,account_commission_balance, ");
      SET @insql = CONCAT(@insql, " account_points_expenditure,account_points_income,account_points_balance, ");
      SET @insql = CONCAT(@insql, " account_tag,account_uptime ");
      SET @insql = CONCAT(@insql, " ) ");
      SET @insql = CONCAT(@insql, " select * from temp_account_table; ");
      PREPARE statement FROM @insql;
      EXECUTE statement;
      DEALLOCATE PREPARE statement;

      #删除临时表
      SET @v_sql = CONCAT('DROP TABLE IF EXISTS temp_account_table;');
      PREPARE statement FROM @v_sql;
      EXECUTE statement;
      DEALLOCATE PREPARE statement;

      #删除1000条数据
      SET @v_sql = CONCAT("delete from temp_account0 where user_id <=", @lastUserId);
      PREPARE statement FROM @v_sql;
      EXECUTE statement;
      DEALLOCATE PREPARE statement;

    END out_label;
    #提交事务
    IF error = 1
    THEN
      ROLLBACK ;
    ELSE
      COMMIT ;
    END IF ;

    set @logId = addTimerlog('TimerTask_lastMonthAccount', error, @execStarttime);
    #判断是否还要继续执行
    SET @shengyu = 0;
    select count(*) into @shengyu from temp_account0;
    IF @shengyu > 0
    THEN
      call TimerTask_lastMonthAccount(@error);
    END IF ;

  END
;;
DELIMITER ;



-- ----------------------------
-- [统计用户次日，次月、次年财务收支]Procedure structure for `TimerTask_userFinance`
-- ----------------------------
DROP PROCEDURE IF EXISTS `TimerTask_userFinance`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `TimerTask_userFinance`(OUT error INT)
  BEGIN

    declare userId int default 0;
    declare amount decimal(14,2) default 0;
    #获取要统计的用户id
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET error = 1; # 异常错误
    SET error = 0;

    # 今日tag
    SET @day_tag = FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y%m%d');
    # 昨日tag
    SET @yesterday_tag = DATE_FORMAT(DATE_ADD(@day_tag, INTERVAL -1 DAY), '%Y%m%d');
    # 昨日的月份tag
    SET @yesterdaymonth_tag = DATE_FORMAT(DATE_ADD(@day_tag, INTERVAL -1 DAY), '%Y%m');
    # 昨日时间戳
    SET @yesterday_sjc = UNIX_TIMESTAMP(@yesterday_tag);
    SET @yesterday_sjcend = @yesterday_sjc + 86400;
    # 昨日的年tag
    SET @yesterdayyear_tag = DATE_FORMAT(DATE_ADD(@day_tag, INTERVAL -1 DAY), '%Y');
    SET @temp_record_finance_table = 'temp_record_finance_table';
    SET @temp_groupdata_userfinance = 'temp_groupdata_userfinance';
    SET @execStarttime = UNIX_TIMESTAMP();
    #开启事务
    START TRANSACTION;
    out_label:BEGIN
        # 1.把昨日用户明细（现金，佣金）放入临时表
        SET @tbrfsql = CONCAT("create table ", @temp_record_finance_table ," as ");
        SET @tbrfsql = CONCAT(@tbrfsql, " select t.* from ( ");
        SET @tbrfsql = CONCAT(@tbrfsql, " select * from jay_account_commission",@yesterdaymonth_tag," where record_addtime >= ",@yesterday_sjc," and record_addtime < ",@yesterday_sjcend," ");
        SET @tbrfsql = CONCAT(@tbrfsql, " UNION ALL ");
        SET @tbrfsql = CONCAT(@tbrfsql, " select * from jay_account_cash",@yesterdaymonth_tag," where record_addtime >= ",@yesterday_sjc," and record_addtime < ",@yesterday_sjcend," ");
        SET @tbrfsql = CONCAT(@tbrfsql, " ) t; ");
        PREPARE statement FROM @tbrfsql;
        EXECUTE statement;
        DEALLOCATE PREPARE statement;
        if error = 1
        then
          leave out_label;
        end if;

        # 2.统计昨日各项收支->临时表
        SET @tbgpsql = CONCAT("create table ", @temp_groupdata_userfinance," as ");
        SET @tbgpsql = CONCAT(@tbgpsql, " select ");
        SET @tbgpsql = CONCAT(@tbgpsql, " null as finance_id, ");
        SET @tbgpsql = CONCAT(@tbgpsql, " m.user_id, ");
        SET @tbgpsql = CONCAT(@tbgpsql, " IFNULL(settle.amount,0) finance_settle  , ");
        SET @tbgpsql = CONCAT(@tbgpsql, " IFNULL(withdraw.amount,0) finance_withdraw , ");
        SET @tbgpsql = CONCAT(@tbgpsql, " IFNULL(recharge.amount,0) finance_recharge , ");
        SET @tbgpsql = CONCAT(@tbgpsql, " IFNULL(`first`.amount,0) finance_first , ");
        SET @tbgpsql = CONCAT(@tbgpsql, " IFNULL(`second`.amount,0) finance_second , ");
        SET @tbgpsql = CONCAT(@tbgpsql, " IFNULL(`operations`.amount,0) finance_operations , ");
        SET @tbgpsql = CONCAT(@tbgpsql, " IFNULL(`operationchilds`.amount,0) finance_operationchilds , ");
        SET @tbgpsql = CONCAT(@tbgpsql, " IFNULL(`playerhost`.amount,0) finance_playerhost , ");
        SET @tbgpsql = CONCAT(@tbgpsql, " IFNULL(`taxfee`.amount,0) finance_taxfee , ");
        SET @tbgpsql = CONCAT(@tbgpsql, " IFNULL(`hanldfee`.amount,0) finance_hanldfee , ");
        SET @tbgpsql = CONCAT(@tbgpsql, @yesterday_tag, " as finance_tag, ");
        SET @tbgpsql = CONCAT(@tbgpsql, " UNIX_TIMESTAMP() as finance_uptime ");
        SET @tbgpsql = CONCAT(@tbgpsql, " from ");
        SET @tbgpsql = CONCAT(@tbgpsql, " (select user_id from temp_record_finance_table GROUP BY user_id order by null) m ");
        SET @tbgpsql = CONCAT(@tbgpsql, " left join (select abs(sum(record_amount)) amount, user_id from temp_record_finance_table where record_action in (652, 651) GROUP BY user_id order by null) as settle on settle.user_id = m.user_id ");
        SET @tbgpsql = CONCAT(@tbgpsql, " left join (select abs(sum(record_amount)) amount, user_id from temp_record_finance_table where record_action in (850, 851, 852) GROUP BY user_id order by null) as withdraw on withdraw.user_id = m.user_id ");
        SET @tbgpsql = CONCAT(@tbgpsql, " left join (select abs(sum(record_amount)) amount, user_id from temp_record_finance_table where record_action = 801 GROUP BY user_id order by null) as recharge on recharge.user_id = m.user_id ");
        SET @tbgpsql = CONCAT(@tbgpsql, " left join (select abs(sum(record_amount)) amount, user_id from temp_record_finance_table where record_action = 601 GROUP BY user_id order by null) as `first` on `first`.user_id = m.user_id ");
        SET @tbgpsql = CONCAT(@tbgpsql, " left join (select abs(sum(record_amount)) amount, user_id from temp_record_finance_table where record_action = 602 GROUP BY user_id order by null) as `second` on `second`.user_id = m.user_id ");
        SET @tbgpsql = CONCAT(@tbgpsql, " left join (select abs(sum(record_amount)) amount, user_id from temp_record_finance_table where record_action = 603 GROUP BY user_id order by null) as `operations` on `operations`.user_id = m.user_id ");
        SET @tbgpsql = CONCAT(@tbgpsql, " left join (select abs(sum(record_amount)) amount, user_id from temp_record_finance_table where record_action = 604 GROUP BY user_id order by null) as `operationchilds` on `operationchilds`.user_id = m.user_id ");
        SET @tbgpsql = CONCAT(@tbgpsql, " left join (select abs(sum(record_amount)) amount, user_id from temp_record_finance_table where record_action = 606 GROUP BY user_id order by null) as `playerhost` on `playerhost`.user_id = m.user_id ");
        SET @tbgpsql = CONCAT(@tbgpsql, " left join (select abs(sum(record_amount)) amount, user_id from temp_record_finance_table where record_action in (853, 854, 855) GROUP BY user_id order by null) as `taxfee` on `taxfee`.user_id = m.user_id ");
        SET @tbgpsql = CONCAT(@tbgpsql, " left join (select abs(sum(record_amount)) amount, user_id from temp_record_finance_table where record_action = 856 GROUP BY user_id order by null) as `hanldfee` on `hanldfee`.user_id = m.user_id; ");
        PREPARE statement FROM @tbgpsql;
        EXECUTE statement;
        DEALLOCATE PREPARE statement;
        if error = 1
        then
          leave out_label;
        end if;

        #3. 插入昨日收支统计
        INSERT IGNORE into jay_account_finance SELECT * from temp_groupdata_userfinance;

        #4.更新用户总收支
        SET @up0sql = CONCAT("UPDATE jay_account_finance f, temp_groupdata_userfinance g set ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_first = f.finance_first + g.finance_first, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_hanldfee = f.finance_hanldfee + g.finance_hanldfee, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_operationchilds = f.finance_operationchilds + g.finance_operationchilds, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_operations = f.finance_operations + g.finance_operations, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_playerhost = f.finance_playerhost + g.finance_playerhost, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_recharge = f.finance_recharge + g.finance_recharge, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_second = f.finance_second + g.finance_second, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_settle = f.finance_settle + g.finance_settle, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_taxfee = f.finance_taxfee + g.finance_taxfee, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_withdraw = f.finance_withdraw + g.finance_withdraw ");
        SET @up0sql = CONCAT(@up0sql, " where f.user_id = g.user_id and f.finance_tag = 0 ");
        PREPARE statement FROM @up0sql;
        EXECUTE statement;
        DEALLOCATE PREPARE statement;
        if error = 1
        then
          leave out_label;
        end if;

        # 5.插入月记录
        SET @upytagsql = CONCAT("insert IGNORE into jay_account_finance(user_id, finance_tag, finance_uptime) ");
        SET @upytagsql = CONCAT(@upytagsql, " select user_id, ",@yesterdaymonth_tag," as finance_tag, UNIX_TIMESTAMP() as finance_uptime ");
        SET @upytagsql = CONCAT(@upytagsql, " from temp_record_finance_table GROUP BY user_id; ");
        PREPARE statement FROM @upytagsql;
        EXECUTE statement;
        DEALLOCATE PREPARE statement;

        #6.更新用户月收支
        SET @up0sql = CONCAT("UPDATE jay_account_finance f, temp_groupdata_userfinance g set ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_first = f.finance_first + g.finance_first, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_hanldfee = f.finance_hanldfee + g.finance_hanldfee, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_operationchilds = f.finance_operationchilds + g.finance_operationchilds, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_operations = f.finance_operations + g.finance_operations, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_playerhost = f.finance_playerhost + g.finance_playerhost, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_recharge = f.finance_recharge + g.finance_recharge, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_second = f.finance_second + g.finance_second, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_settle = f.finance_settle + g.finance_settle, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_taxfee = f.finance_taxfee + g.finance_taxfee, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_withdraw = f.finance_withdraw + g.finance_withdraw ");
        SET @up0sql = CONCAT(@up0sql, " where f.user_id = g.user_id and f.finance_tag = ", @yesterdaymonth_tag);
        PREPARE statement FROM @up0sql;
        EXECUTE statement;
        DEALLOCATE PREPARE statement;
        if error = 1
        then
          leave out_label;
        end if;

        # 7.插入年记录
        SET @upytagsql = CONCAT("insert IGNORE into jay_account_finance(user_id, finance_tag, finance_uptime) ");
        SET @upytagsql = CONCAT(@upytagsql, " select user_id, ",@yesterdayyear_tag," as finance_tag, UNIX_TIMESTAMP() as finance_uptime ");
        SET @upytagsql = CONCAT(@upytagsql, " from temp_record_finance_table GROUP BY user_id; ");
        PREPARE statement FROM @upytagsql;
        EXECUTE statement;
        DEALLOCATE PREPARE statement;

        #8.更新用户年收支
        SET @up0sql = CONCAT("UPDATE jay_account_finance f, temp_groupdata_userfinance g set ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_first = f.finance_first + g.finance_first, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_hanldfee = f.finance_hanldfee + g.finance_hanldfee, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_operationchilds = f.finance_operationchilds + g.finance_operationchilds, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_operations = f.finance_operations + g.finance_operations, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_playerhost = f.finance_playerhost + g.finance_playerhost, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_recharge = f.finance_recharge + g.finance_recharge, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_second = f.finance_second + g.finance_second, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_settle = f.finance_settle + g.finance_settle, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_taxfee = f.finance_taxfee + g.finance_taxfee, ");
        SET @up0sql = CONCAT(@up0sql, " f.finance_withdraw = f.finance_withdraw + g.finance_withdraw ");
        SET @up0sql = CONCAT(@up0sql, " where f.user_id = g.user_id and f.finance_tag = ", @yesterdayyear_tag);
        PREPARE statement FROM @up0sql;
        EXECUTE statement;
        DEALLOCATE PREPARE statement;
        if error = 1
        then
          leave out_label;
        end if;

        #9删除临时表
        SET @v_sql = CONCAT('DROP TABLE IF EXISTS ', @temp_record_finance_table, ';');
        PREPARE statement FROM @v_sql;
        EXECUTE statement;
        DEALLOCATE PREPARE statement;
        #9删除临时表
        SET @v_sql = CONCAT('DROP TABLE IF EXISTS ', @temp_groupdata_userfinance, ';');
        PREPARE statement FROM @v_sql;
        EXECUTE statement;
        DEALLOCATE PREPARE statement;

    END out_label;
    #提交事务
    IF error = 1
      THEN
        ROLLBACK ;
      ELSE
        COMMIT ;
    END IF ;
    set @logId = addTimerlog('TimerTask_userFinance', error, @execStarttime);
  END ;
;;
DELIMITER ;




-- ----------------------------
-- 函数日志记录 `addTimerlog`
-- ----------------------------
DROP FUNCTION IF EXISTS `addTimerlog`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `addTimerlog`(pname VARCHAR(50), errorstatis int, stime int) RETURNS int(4)
    SQL SECURITY INVOKER
BEGIN

    INSERT INTO jay_timer_log(procedurename, `error`, starttime, addtime) VALUES (pname, errorstatis, stime, UNIX_TIMESTAMP());
    RETURN LAST_INSERT_ID();

END
;;
DELIMITER ;


-- ----------------------------
-- Event structure for `timer_createtable`
-- [每月1号，自动创建资金明细日志表]
-- ----------------------------
DROP EVENT IF EXISTS `timer_createtable`;
DELIMITER ;;
CREATE EVENT `timer_createtable`
  ON SCHEDULE EVERY 1 MONTH STARTS '2018-09-01 00:00:01'
  ON COMPLETION NOT PRESERVE
ENABLE
DO
  call TimerTask_recordtable(@error);
;;
DELIMITER ;


-- ----------------------------
-- Event structure for `timer_cirijiesuan`
-- [每天0点1分，自动结算 前一天佣金]
-- ----------------------------
DROP EVENT IF EXISTS `timer_cirijiesuan`;
DELIMITER ;;
CREATE DEFINER=`root`@`%` EVENT `timer_cirijiesuan`
  ON SCHEDULE EVERY 1 DAY STARTS '2018-09-20 00:01:00'
  ON COMPLETION NOT PRESERVE
  ENABLE DO
    call TimerTask_ciriJiesuan(@error);
;;
DELIMITER ;


-- ----------------------------
-- Event structure for `timer_userlashmonthaccount`
-- [每月1号2点，统计上个月收支]
-- ----------------------------
DROP EVENT IF EXISTS `timer_userlashmonthaccount`;
DELIMITER ;;
CREATE DEFINER=`root`@`%` EVENT `timer_userlashmonthaccount`
  ON SCHEDULE EVERY 1 MONTH STARTS '2018-09-01 02:00:01'
  ON COMPLETION NOT PRESERVE ENABLE DO
    call TimerTask_lastMonthAccount(@error);
;;
DELIMITER ;



-- ----------------------------
-- Event structure for `timer_userfinance`
-- [每日凌晨，统计昨日，月，年收支财务]
-- ----------------------------
DROP EVENT IF EXISTS `timer_userfinance`;
DELIMITER ;;
CREATE DEFINER=`root`@`%` EVENT `timer_userfinance`
  ON SCHEDULE EVERY 1 DAY STARTS '2018-09-10 05:00:00'
  ON COMPLETION NOT PRESERVE ENABLE DO
    call TimerTask_userFinance(@error);
;;
DELIMITER ;