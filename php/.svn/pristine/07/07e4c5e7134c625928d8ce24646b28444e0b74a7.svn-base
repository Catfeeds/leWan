<?php
namespace app\common;

use think\Controller;
use think\Request;
use think\Db;
use app\common\RegExpression;
use app\api\controller\ApiBaseController;
/**
 * 基类
 * Enter description here ...
 * @author Administrator
 *
 */
class BaseController extends Controller
{

    public $CFG;

    /**
     * 入口控制
     * Enter description here ...
     */
    public function __construct(){

        parent::__construct();

        //系统参数配置
        $this->getSystemConfig();

        //时间戳
        $this->assign('time', time());
    }


    /**
     * 接口返回数据
     * @param $msg
     * @param int $status
     * @param array $data
     */
    private function returnApiData($msg, $status=200, $data=[]){
        $res['code']    = $status;
        $res['message'] = $msg;
        $res['data']    = $data;
        header('content-type:application/json;charset=utf8');
        echo json_encode($res, JSON_UNESCAPED_UNICODE);
        Db::rollback();
        exit;
    }

    /**
     * 获取GET变量的值
     * Enter description here ...
     * @param string $key
     * @param int/string $default   默认值   
     * @param string $exp     正则名称，使用RegExpression提供的值
     * @param string $field   字段中文名称
     */
    protected function get($key, $default='', $exp='', $field=''){
        $value = Request::instance()->param($key);
        //2.设置默认值
        if($value == '' || empty($value)){
            $value = $default;
        }
        //3.验证格式
        if($exp == ''){
            return $value;
        }else{
            return $this->verfiyExp($value, $exp, $field);
        }
        echo $val;
    }
    
    
    /**
     * 获取POST变量的值
     * Enter description here ...
     * @param string $key
     * @param int/string $default   默认值   
     * @param string $exp     正则名称，使用RegExpression提供的值
     * @param string $field   字段中文名称
     */
    protected function post($key, $default='', $exp='', $field=''){
        $value = Request::instance()->post($key);
        //2.设置默认值
        if($value == '' || empty($value)){
            $value = $default;
        }
        //3.验证格式
        if($exp == ''){
            return $value;
        }else{
            return $this->verfiyExp($value, $exp, $field);
        }
    }

    /**
     * 直接验证一个值
     * @param $value
     * @param string $exp
     * @param string $field
     * @return mixed
     */
    protected function verfiyValue($value, $exp='', $field=''){
        return $this->verfiyExp($value, $exp, $field);
    }
    
    private function verfiyExp($value, $exp, $field){
        switch ($exp) {
            case RegExpression::REQUIRED:
                if($value == ''){
                    $this->commonReturn($field.'必填', 0);
                }
                break;
            case RegExpression::MIN2:
                if(mb_strlen($value, 'utf-8') < 2){
                    $this->commonReturn($field.'至少2位字符', 0);
                }
                break;
            case RegExpression::MIN5:
                if(mb_strlen($value, 'utf-8') < 5){
                    $this->commonReturn($field.'至少5位字符', 0);
                }
                break;
            case RegExpression::CAPTCHA:
                if(!captcha_check($value)){
                    $this->commonReturn($field.'错误', 0);
                }
                break;
            default:
                $express = RegExpression::getExp($exp);
                if($express != ''){
                    if(!preg_match($express, $value)){
                        $this->commonReturn($field.'格式不正确', 0);
                    }
                }
                break;
        }
        return $value;
    }
    
    /**
     * 加载系统配置
     */
    protected function getSystemConfig(){
        $config = Db::name('sys_config')->order('sort asc')->column('value', 'field');
        $this->assign('config', $config);
        $this->CFG = $config;
    }

    /**
     * 1012 无法读取系统表中的记录 1146 表不存在 1045 数据库密码 账户 错误 1049 未知数据库 1053 在操作过程中服务器关闭 1051未知表
    1016 无法打开文件 1017 无法找到文件 1021 磁盘满(%s)；等待某人释放一些空间.  1022  无法写入；复制表'%s'的 键。 1027 已锁定，拒绝更改
    1030 从存储引擎中获得错误  1032 无法在'%s'中找到记录。 1037 内存溢出，重启服务器并再次尝试（需要%d字节） 1040 连接过多
    1042 无法获得该地址给出的主机名 1044 拒绝用户'%s'@'%s'访问数据库'%s' 1046 未选择数据库  1047 未知命令
     * @param $Error 错误信息
     * 捕获mysql异常并抛出
     */
    function Tpl_Abnormal($Error){
        if(!empty($Error)){
            $request = Request::instance();
            $Modul      = $request->module();
            $Controller = $request->controller();
            $Action     = $request->action();

            $Url = $Modul."/".$Controller."/".$Action;

            $File = 'public/databaselog/'.date("Y-m-d",time());
            createDir($File);//创建支付记录文件
            $Txt = $File.'/database.txt';

//            //log日志文件
//            $Txt       = 'public/404/Databaselog/Database.log'; //错误日志保存目录文件地址
//要写入的内容
            $AddLogStr = "\r\n\r\n".date('Y-m-d H:i:s')."记录了一条信息\r\n";//记录日志开头的标识
            //打开资源并将光标设置为末尾
            $Data = "(接口：$Url),错误sql".$Error;
            $Fp = fopen($Txt,"a+");//判断文件是否存在,不存在添加文件

            $String = iconv("UTF-8", "GB2312//IGNORE", $AddLogStr.$Data);

            //写入内容
            fwrite($Fp,$String);

            //关闭资源
            fclose($Fp);
        }
        $Error        = explode(':', $Error);
        $AataBase     = array(1049,1045,1053,1040,1042,1044,1046,1037,1021);//数据库错误的标识符
        $SqlSubscript = array(1012,1146,1051,1016,1017,1022,1027,1030,1047);//sql错误的标识符
        if(!empty($Error[0])){
           $this->returnApiData("服务器响应失败",500);
//            if(in_array($Error[0],$AataBase)){
//                 $this->returnApiData("服务器响应失败",500);
//            }else if(in_array($Error[0],$SqlSubscript)){
//                 $this->returnApiData("服务器响应失败",500);
//            }else if($Error[0] == "表达式错误"){
//                 $this->returnApiData("服务器响应失败",500);
//            }else{
//                 $this->returnApiData("服务器响应失败",500);
//            }
        }
    }

    /**
     * @param $Time     判断的时间
     * @param $News     返回的提醒消息
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 判断时间不能大于当前时间
     */
    function Tpl_NotGtTime($Time,$News,$Visit = 1){
        $CurrentTime       =  strtotime(date("Y-m-d H:i:s",time())); //获取当前时间戳
        if ($Time > $CurrentTime) {
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }

    /**
     * @param $Time    时间格式 时间戳和年月日格式
     * @param $Data    需要执行的转变的格式
     * @param int $Day 代表天数 小时 分钟 默认为1
     * @return bool|int|string 时间格式转换
     */
    function Tpl_Time($Time = null,$Data,$Day = 1){
        if(!empty($Time)){

            switch ($Data){
                case 1:
                    return  date("Y-m-d H:i:s",$Time); //时间戳转换为2017-09-06 09:15:09 这样的格式
                case 2:
                    return  date("Y-m-d H:i",$Time); //时间戳转换为2017-09-06 09:15 这样的格式
                case 3:
                    return  date("Y-m-d H",$Time); //时间戳转换为2017-09-06 09 这样的格式
                case 4:
                    return  date("Y-m-d",$Time); //时间戳转换为2017-09-06 这样的格式
                case 5:
                    return  strtotime("+$Day day", is_numeric($Time)?$Time:strtotime($Time)); //时间2017-09-06 这样的格式转换为时间戳格式并加天数默认加一天
                case 6:
                    return  strtotime("-$Day day", is_numeric($Time)?$Time:strtotime($Time)); //时间2017-09-06 这样的格式转换为时间戳格式并减天数，默认减一天
                case 7:
                    return  strtotime("+$Day hours", is_numeric($Time)?$Time:strtotime($Time)); //时间2017-09-06 这样的格式转换为时间戳格式并加小时,默认一小时
                case 8:
                    return  strtotime("-$Day hours", is_numeric($Time)?$Time:strtotime($Time)); //时间2017-09-06 这样的格式转换为时间戳格式并减小时,默认一小时
                case 9:
                    return  strtotime("+$Day minutes", is_numeric($Time)?$Time:strtotime($Time)); //时间2017-09-06 这样的格式转换为时间戳格式并加分钟,默认一分钟
                case 10:
                    return  strtotime("-$Day minutes", is_numeric($Time)?$Time:strtotime($Time)); //时间2017-09-06 这样的格式转换为时间戳格式并减分钟,默认一分钟
                default:
                    return "";
            }
        }else{
            if($Data == 11){
                return  date('Y-m-01', strtotime(date("Y-m-d"))); //获取本月第一天
            }
        }
    }
    /**
     * @param $StartTime  开始时间
     * @param $EndTime    结束时间
     * @param $Visit      返回端口 1后台返回格式 2api接口返回格式
     * 当开始时间和结束时间都不为空的时候,进行时间对比判断
     */
    function Tpl_TimeContrast($StartTime,$EndTime,$Visit = 1){
        $Time       =  strtotime(date("Y-m-d H:i:s",time())); //获取当前时间戳

        if ($StartTime > $EndTime) {
            if($Visit == 1){
                $this->commonReturn("开始时间不能大于结束时间", 0);
            }else if($Visit == 2){
                 $this->returnApiData("开始时间不能大于结束时间",400);
            }
        }else if($StartTime == $EndTime){
            if($Visit == 1){
                $this->commonReturn("开始时间和结束时间不能相等", 0);
            }else if($Visit == 2){
                 $this->returnApiData("开始时间和结束时间不能相等",400);
            }
        }else if ($StartTime > $Time || $EndTime > $Time) {
            if($Visit == 1){
                $this->commonReturn("开始时间和结束时间不能大于当前时间", 0);
            }else if($Visit == 2){
                 $this->returnApiData("开始时间和结束时间不能大于当前时间",400);
            }
        }
    }

    /**
     * @param $StartTime  开始时间
     * @param $EndTime    结束时间
     * @param $Visit      返回端口 1后台返回格式 2api接口返回格式
     * 当开始时间和结束时间都不为空的时候,进行时间对比判断
     */
    function Tpl_TimeContrast1($StartTime,$EndTime,$Visit = 1){
        $Time       =  strtotime(date("Y-m-d H:i:s",time())); //获取当前时间戳

        if ($StartTime > $EndTime) {
            if($Visit == 1){
                $this->commonReturn("开始时间不能大于结束时间", 0);
            }else if($Visit == 2){
                 $this->returnApiData("开始时间不能大于结束时间",400);
            }
        }else if($StartTime == $EndTime){
            if($Visit == 1){
                $this->commonReturn("开始时间和结束时间不能相等", 0);
            }else if($Visit == 2){
                 $this->returnApiData("开始时间和结束时间不能相等",400);
            }
        }else if ($StartTime > $Time ) {
            if($Visit == 1){
                $this->commonReturn("开始时间不能大于当前时间", 0);
            }else if($Visit == 2){
                 $this->returnApiData("开始时间和结束时间不能大于当前时间",400);
            }
        }
    }

    /**
     * @param $Password 密码字符串
     * @param $Data     1直接返回页面提醒消息 2返回消息提醒内容 默认1
     * @param $Status   1后台密码 2前端密码
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 密码正则验证
     */
    function Tpl_BackstagePwd($Password,$Data = 1,$Status = 1,$Visit = 1){
        if($Status == 1){
            if(!func_pwd_verification($Password)){
                if($Data == 1){
                    $this->commonReturn("密码不能小于6位大于16位,不能有空格,只能是a-z A-Z 0-9 .-~!@#$%^&*_组成", 0);
                }else if($Data == 2){
                    return   '密码不能小于6位大于16位,不能有空格,只能是a-z A-Z 0-9 .-~!@#$%^&*_组成';
                }
            }
        }else if($Status == 2){
            if(!func_encryption($Password)){
                if($Data == 1){
                    if($Visit == 1){
                        $this->commonReturn("登录密码格式错误,密码只能是大小写字母,0-9,特殊符号,其中的两种组成,不能有空格不能小于6位大于16位", 0);
                    }else if($Visit == 2){
                         $this->returnApiData("密码只能是a-zA-Z0-9,特殊符号,其中的两种组成,不能有空格不能小于6位大于16位",400);
                    }
                }else if($Data == 2){
                    return   '登录密码格式错误,密码只能是大小写字母,0-9,特殊符号,其中的两种组成,不能有空格不能小于6位大于16位';
                }
            }
        }

    }

    /**
     * @param $NewPwd      新密码
     * @param $ConfirmPwd  确认密码
     * @param int $Date    1直接返回页面提醒消息 2返回消息提醒内容 默认1
     * @param $Visit       返回端口 1后台返回格式 2api接口返回格式
     * @return string      修改密码新密码和确认密码对比
     */
    function Tpl_PwdContrast($NewPwd,$ConfirmPwd,$Data = 1,$Visit = 1){
        if($NewPwd != $ConfirmPwd){
            if($Data == 1){
                if($Visit == 1){
                    $this->commonReturn("两次密码不一致请重新输入密码", 0);
                }else if($Visit == 2){
                     $this->returnApiData("两次密码不一致请重新输入密码",400);
                }
            }else if($Data == 2){
                return '两次密码不一致请重新输入密码';
            }
        }
    }
    /**
     * @param $Name     判断的值
     * @param $News     返回的提醒消息
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 判断数据是不是为空
     */
    function Tpl_NotEmpty($Name,$News,$Visit = 1){
        if(empty($Name) || ctype_space($Name)){
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }

    /**
     * @param $Name     判断的值
     * @param $News     返回的提醒消息
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 判断数据是不是为空
     */
    function Tpl_Empty($Name,$News,$Visit = 1){
        if(empty($Name)){
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }

    /**
     * @param $Name       判断的值
     * @param $News       返回的提醒消息
     * @param int $Visit  返回端口 1后台返回格式 2api接口返回格式
     * 判断字符串是不是数字和字母
     */
    function Tpl_Alphanumeric($Name,$News,$Visit = 1){
        if(!Func_Alphanumeric($Name)){
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }

    /**
     * @param $Name 要验证的值
     * @param $News 返回的消息
     * 判断字符串是不是中文加空格,不能全是空格
     */
    function Tpl_Chineses($Name,$News){
        if(!Func_Chineses($Name)){
            $this->commonReturn($News, 0);
        }
    }

    /**
     * @param $Name 要验证的值
     * @param $News 返回的消息
     * 判断字符串是不是英文加空格,不能全是空格
     */
    function Tpl_English($Name,$News){
        if(!Func_English($Name)){
            $this->commonReturn($News, 0);
        }
    }
    /**
     * @param $Name     要验证的值
     * @param $News     返回的提醒消息
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 值等于空或者值有空格判断
     */
    function Tpl_NoSpaces($Name,$News,$Visit = 1){
        if(empty($Name) || strpos($Name," ")){
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }

        }
    }

    /**
     * @param $String      要验证的值
     * @param $News        返回的提醒消息
     * @param int $Visit   返回端口 1后台返回格式 2api接口返回格式
     * 验证字符串是不是全空格
     */

    function Tpl_FullSpace($String,$News,$Visit = 1){
        if(ctype_space($String)){
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }

    /**
     * @param $String     判断的字符串
     * @param $News       返回的提醒消息
     * @param int $Data   1不能小于多少个字节 2不能大于多少个字节 3不能小于多少个字节和不能大于多少个字节 默认为1
     * @param int $GtByte 小于多少个字节默认6个字节
     * @param int $LtByte 大于多少个字节默认12个字节
     * @param $Visit      返回端口 1后台返回格式 2api接口返回格式
     * 两个字符串的对比判断
     */
    function Tpl_StringLength($String,$News,$Data = 1,$GtByte = 6,$LtByte = 12,$Visit = 1){
        if($Data == 1){
            if(mb_strlen($String,'utf-8') < $GtByte){
                if($Visit == 1){
                    $this->commonReturn($News, 0);
                }else if($Visit == 2){
                     $this->returnApiData($News,400);
                }
            }
        }else if($Data == 2){
            if(mb_strlen($String,'utf-8') > $LtByte){
                if($Visit == 1){
                    $this->commonReturn($News, 0);
                }else if($Visit == 2){
                     $this->returnApiData($News,400);
                }
            }
        }else if($Data == 3){
            if(mb_strlen($String,'utf-8') < $GtByte || mb_strlen($String,'utf-8') > $LtByte){
                if($Visit == 1){
                    $this->commonReturn($News, 0);
                }else if($Visit == 2){
                     $this->returnApiData($News,400);
                }
            }
        }
    }

    /**
     * @param $Money    金额以位数2位为标准
     * @param $News     返回的提醒消息
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 判断金额的格式是否正确
     */
    function Tpl_Money($Money,$News,$Visit = 1){
        if(!fun_money($Money)){
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }

    /**
     * @param $E        折扣值
     * @param $News     返回的提醒消息
     * @param int $Visit 验证折扣格式是否正确
     */
    function Tpl_Discount($E,$News,$Visit = 1){
        if(!Func_Discount($E)){
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }
    /**
     * @param $Number   数字
     * @param $News     返回的提醒消息
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 判断数字是不是1-9正整数
     */
    function Tpl_Integer($Number,$News,$Visit = 1){
        if(!perpNum($Number)){
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }

    /**
     * @param $Number   验证的值
     * @param $News     返回的提醒消息
     * @param int $Visit  返回端口 1后台返回格式 2api接口返回格式
     * 判断值是不是0-9的数字
     */
    function Tpl_Integral($Number,$News,$Visit = 1){
        if(!Integers($Number)){
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }
    /**
     * @param $Number   验证的值
     * @param $News     返回的提醒消息
     * @param int $Visit  返回端口 1后台返回格式 2api接口返回格式
     * 判断值是不是正数数字
     */
    function Tpl_Positive($Number,$News,$Visit = 1){
        if(!positive($Number)){
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }
    /**
     * @param $Data     百分比值
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 判断百分比值格式是否该正确
     */
    function Tpl_Percentage($Data,$Visit = 1){
        if(!Func_Percentage($Data)){
            if($Visit == 1){
                $this->commonReturn("比例只能是整数或者小数,小数位数最大为2位,不能为空,不能大于100小于0.00", 0);
            }else if($Visit == 2){
                 $this->returnApiData("比例只能是整数或者小数,小数位数最大为2位,不能为空,不能大于100小于0.00",400);
            }
        }
    }

    /**
     * @param $One      第一个值
     * @param $Two      第二个值
     * @param $News     返回的提醒消息
     * @param int $Data 1大于 2大于等于 3小于 4小于等于 5等于 6 不等于
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 两个值的判断
     */
    function Tpl_Contrast($One,$Two,$News,$Data = 1,$Visit = 1){
        switch ($Data){
            case 1:
                if($One > $Two){
                    if($Visit == 1){
                        $this->commonReturn($News, 0);
                    }else if($Visit == 2){
                         $this->returnApiData($News,400);
                    }
                }
                break;
            case 2:
                if($One >= $Two){
                    if($Visit == 1){
                        $this->commonReturn($News, 0);
                    }else if($Visit == 2){
                         $this->returnApiData($News,400);
                    }
                }
                break;
            case 3:
                if($One < $Two){
                    if($Visit == 1){
                        $this->commonReturn($News, 0);
                    }else if($Visit == 2){
                         $this->returnApiData($News,400);
                    }
                }
                break;
            case 4:
                if($One <= $Two){
                    if($Visit == 1){
                        $this->commonReturn($News, 0);
                    }else if($Visit == 2){
                         $this->returnApiData($News,400);
                    }
                }
                break;
            case 5:
                if($One == $Two){
                    if($Visit == 1){
                        $this->commonReturn($News, 0);
                    }else if($Visit == 2){
                         $this->returnApiData($News,400);
                    }
                }
                break;
            case 6:
                if($One != $Two){
                    if($Visit == 1){
                        $this->commonReturn($News, 0);
                    }else if($Visit == 2){
                         $this->returnApiData($News,400);
                    }
                }
                break;
            default:
                $News = "请选择正确的方式";
                if($Visit == 1){
                    $this->commonReturn($News, 0);
                }else if($Visit == 2){
                     $this->returnApiData($News,400);
                }
        }
    }

    /**
     * @param $Name     验证的值
     * @param $News     返回的提醒消息
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 判断字符串是不是中文
     */
    function Tpl_Chinese($Name,$News,$Visit = 1){
        if(!Func_Chinese($Name)){
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }

    /**
     * @param $Name     手机号码字符串
     * @param $News     返回提醒消息
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 判断手机格式是否正确
     */
    function Tpl_Phone($Name,$News = "手机格式错误,请输入正确的手机号码",$Visit = 1){
        if(!pregPhone($Name)){
            if($Visit == 1){
                $this->commonReturn("手机号码格式错误", 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }

    /**
     * @param $Name     支付密码字符串
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 判断支付密码格式是否正确
     */
    function Tpl_PaymentPwd($Name,$Visit = 1){
        if(!Func_Payment($Name)){
            if($Visit == 1){
                $this->commonReturn("支付密码格式错误,只能是数字必须是6位", 0);
            }else if($Visit == 2){
                 $this->returnApiData("支付密码格式错误,只能是数字必须是6位",400);
            }
        }
    }

    /**
     * @param $Name     邮箱字符串
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 验证邮箱格式是否正确
     */
    function Tpl_Email($Name,$Visit = 1){
        if(!Func_Email($Name)){
            if($Visit == 1){
                $this->commonReturn("邮箱错误,必须含有@ .,如123@qq.com", 0);
            }else if($Visit == 2){
                 $this->returnApiData("邮箱错误,必须含有@ .,如123@qq.com",400);
            }
        }
    }

    /**
     * @param $Name     身份证号码字符串
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 验证身份证号码格式是否正确
     */
    function Tpl_IdCard($Name,$Visit = 1){
        if(!Func_IdCard($Name)){
            if($Visit == 1){
                $this->commonReturn("身份证号码错误只能是15位和18位数字或者18位结尾为Xx结尾的格式", 0);
            }else if($Visit == 2){
                 $this->returnApiData("身份证号码错误只能是15位和18位数字或者18位结尾为Xx结尾的格式",400);
            }
        }
    }

    /**
     * @param $Name     银行卡账号字符串
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * 验证银行卡号格式是否正确
     */
    function Tpl_DateCard($Name,$Visit = 1){
        if(!ValiDateCard($Name)){
            if($Visit == 1){
                $this->commonReturn("银行卡格式错误", 0);
            }else if($Visit == 2){
                 $this->returnApiData("银行卡格式错误",400);
            }
        }
    }

    /**
     * @param $Url      网址路径
     * @param $Visit    返回端口 1后台返回格式 2api接口返回格式
     * url路径格式验证
     */
    function Tpl_Url($Url,$Visit = 1){
        if(!Func_url($Url)){
            if($Visit == 1){
                $this->commonReturn("请输入正确的网址格式地址,比如https://www.baidu.com", 0);
            }else if($Visit == 2){
                 $this->returnApiData("请输入正确的网址格式地址,比如https://www.baidu.com.",400);
            }
        }
    }

    /**
     * @param $Name string 输入内容
     * @param $News string 返回内容
     * @param int $Min 最小值 默认2
     * @param int $Max 最大值 默认10
     * @author 何远军
     */
    function Tpl_Lengths($Name,$News,$Min=2,$Max=10,$Visit=1){
        if (mb_strlen($Name,'utf-8') < $Min || mb_strlen($Name,'utf-8') > $Max) {
            if($Visit == 1){
                $this->commonReturn($News, 0);
            }else if($Visit == 2){
                 $this->returnApiData($News,400);
            }
        }
    }
    /**
     * @param $StartTime  开始时间
     * @param $EndTime    结束时间
     * @判断禁言时间 当开始时间和结束时间都不为空的时候,进行时间对比判断
     * @author 何远军
     */
    function Tpl_TimeShutup($StartTime,$EndTime,$Visit=1){
        $Time = strtotime(date("Y-m-d H:i:s",time())); //获取当前时间戳
        if ($StartTime > $EndTime) {
            if($Visit == 1){
                $this->commonReturn("开始时间不能大于结束时间", 0);
            }else if($Visit == 2){
                 $this->returnApiData("开始时间不能大于结束时间",400);
            }
        }else if($StartTime == $EndTime){
            if($Visit == 1){
                $this->commonReturn("开始时间和结束时间不能相等", 0);
            }else if($Visit == 2){
                 $this->returnApiData("开始时间和结束时间不能相等",400);
            }
        }else if ($StartTime < $Time) {
            if($Visit == 1){
                $this->commonReturn("开始时间不能小于当前时间", 0);
            }else if($Visit == 2){
                 $this->returnApiData("开始时间不能小于当前时间",400);
            }
        }
    }

    /**
     * 正则验证特殊字符串
     * @param $content
     * @param $hint  返回消息
     * @return int
     * @author 肖亚子
     */
    function Tpl_Character($Content,$hint)
    {
        if(Func_Character($Content)){
            $this->commonReturn($hint, 0);
        }
    }

    /**
     * @param $Content 验证字段
     * @param $News    验证城市利率格式是否正确
     */
    function Tpl_None($Content){
        if(!Func_None($Content)){
            $this->commonReturn("城市利率0-1之间,最多6位小数", 0);
        }
    }
    
}
